<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NeoCortexApi</name>
    </assembly>
    <members>
        <member name="T:NeoCortexApi.Anomaly.Mode">
            Modes to use for factory creation method 
        </member>
        <member name="M:NeoCortexApi.Anomaly.#ctor">
            Constructs a new {@code Anomaly}
        </member>
        <member name="M:NeoCortexApi.Anomaly.#ctor(System.Boolean,System.Int32)">
            Constructs a new {@code Anomaly}
            
            @param useMovingAverage  indicates whether to apply and store a moving average
            @param windowSize        size of window to average over
        </member>
        <member name="F:NeoCortexApi.Classification`1.actualValues">
            Array of actual values 
        </member>
        <member name="F:NeoCortexApi.Classification`1.probabilities">
            Map of step count -to- probabilities 
        </member>
        <member name="M:NeoCortexApi.Classification`1.copy">
            Utility method to copy the contents of a ClassifierResult.
            
            @return  a copy of this {@code ClassifierResult} which will not be affected
            by changes to the original.
        </member>
        <member name="M:NeoCortexApi.Classification`1.getActualValue(System.Int32)">
            Returns the actual value for the specified bucket index
            
            @param bucketIndex
            @return
        </member>
        <member name="M:NeoCortexApi.Classification`1.getActualValues">
            Returns all actual values entered
            
            @return  array of type &lt;T&gt;
        </member>
        <member name="M:NeoCortexApi.Classification`1.setActualValues(`0[])">
            Sets the array of actual values being entered.
            
            @param values
            @param &lt;T&gt;[]	the value array type
        </member>
        <member name="M:NeoCortexApi.Classification`1.getActualValueCount">
            Returns a count of actual values entered
            @return
        </member>
        <member name="M:NeoCortexApi.Classification`1.getStat(System.Int32,System.Int32)">
            Returns the probability at the specified index for the given step
            @param step
            @param bucketIndex
            @return
        </member>
        <member name="M:NeoCortexApi.Classification`1.setStats(System.Int32,System.Double[])">
            Sets the array of probabilities for the specified step
            @param step
            @param votes
        </member>
        <member name="M:NeoCortexApi.Classification`1.getStats(System.Int32)">
            Returns the probabilities for the specified step
            @param step
            @return
        </member>
        <member name="M:NeoCortexApi.Classification`1.getMostProbableValue(System.Int32)">
            Returns the input value corresponding with the highest probability
            for the specified step.
            
            @param step		the step key under which the most probable value will be returned.
            @return
        </member>
        <member name="M:NeoCortexApi.Classification`1.getMostProbableBucketIndex(System.Int32)">
            Returns the bucket index corresponding with the highest probability
            for the specified step.
            
            @param step		the step key under which the most probable index will be returned.
            @return			-1 if there is no such entry
        </member>
        <member name="M:NeoCortexApi.Classification`1.getStepCount">
            Returns the count of steps
            @return
        </member>
        <member name="M:NeoCortexApi.Classification`1.getStatCount(System.Int32)">
            Returns the count of probabilities for the specified step
            @param	the step indexing the probability values
            @return
        </member>
        <member name="M:NeoCortexApi.Classification`1.stepSet">
            Returns a set of steps being recorded.
            @return
        </member>
        <member name="T:NeoCortexApi.Encoders.EncoderBase">
            <summary>
            Base class for all encoders.
            </summary> 
        </member>
        <member name="F:NeoCortexApi.Encoders.EncoderBase.Properties">
            <summary>
            List of all encoder properties.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:NeoCortexApi.Encoders.EncoderBase.description" -->
        <member name="F:NeoCortexApi.Encoders.EncoderBase.m_NumOfBits">
            number of bits in the representation (must be >= w) 
        </member>
        <member name="F:NeoCortexApi.Encoders.EncoderBase.halfWidth">
            the half width value 
        </member>
        <member name="F:NeoCortexApi.Encoders.EncoderBase.topDownMapping">
            This matrix is used for the topDownCompute. We build it the first time
            topDownCompute is called
        </member>
        <member name="M:NeoCortexApi.Encoders.EncoderBase.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:NeoCortexApi.Encoders.EncoderBase.#ctor(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Called by framework to initialize encoder with all required settings.
            </summary>
            <param name="encoderSettings"></param>
        </member>
        <member name="M:NeoCortexApi.Encoders.EncoderBase.Initialize(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Sets the copy all properties.
            </summary>
            <param name="encoderSettings"></param>
        </member>
        <member name="M:NeoCortexApi.Encoders.EncoderBase.AfterInitialize">
            <summary>
            Called by framework to initialize encoder with all required settings. This method is useful
            for implementation of validation logic for properties.
            Otherwise, if any additional initialization is required, override this method.
            When this method is called, all encoder properties are already set in member <see cref="F:NeoCortexApi.Encoders.EncoderBase.Properties"/>.
            </summary>
        </member>
        <member name="P:NeoCortexApi.Encoders.EncoderBase.Item(System.String)">
            <summary>
            Key acces to property set.
            </summary>
            <param name="key">Name of property.</param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "P:NeoCortexApi.Encoders.EncoderBase.FlattenedFieldTypeList" -->
        <member name="M:NeoCortexApi.Encoders.EncoderBase.setTopDownMapping(NeoCortexApi.Entities.SparseObjectMatrix{System.Int32[]})">
             This matrix is used for the topDownCompute. We build it the first time
             topDownCompute is called
            
             @param sm
        </member>
        <member name="M:NeoCortexApi.Encoders.EncoderBase.addEncoder(NeoCortexApi.Encoders.EncoderBase,System.String,NeoCortexApi.Encoders.EncoderBase,System.Int32)">
            Returns the resolution
            @return
             Adds a the specified {@link Encoder} to the list of the specified
             parent's {@code Encoder}s.
            
             @param parent	the parent Encoder
             @param name		Name of the {@link Encoder}
             @param e			the {@code Encoder}
             @param offset	the offset of the encoded output the specified encoder
             					was used to encode.
        </member>
        <member name="M:NeoCortexApi.Encoders.EncoderBase.getEncoderTuple(NeoCortexApi.Encoders.EncoderBase)">
            Returns the {@link Tuple} containing the specified {@link Encoder}
            @param e		the Encoder the return value should contain
            @return		the {@link Tuple} containing the specified {@link Encoder}
        </member>
        <member name="M:NeoCortexApi.Encoders.EncoderBase.getEncoders(NeoCortexApi.Encoders.EncoderBase)">
             Returns the list of child {@link Encoder} {@link Tuple}s
             corresponding to the specified {@code Encoder}
            
             @param e		the parent {@link Encoder} whose child Encoder Tuples are being returned
             @return		the list of child {@link Encoder} {@link Tuple}s
        </member>
        <member name="M:NeoCortexApi.Encoders.EncoderBase.getEncoders">
            Returns the list of {@link Encoder}s
            @return
        </member>
        <member name="M:NeoCortexApi.Encoders.EncoderBase.setLearningEnabled(System.Boolean)">
             Sets the encoder flag indicating whether learning is enabled.
            
             @param	encLearningEnabled	true if learning is enabled, false if not
        </member>
        <member name="M:NeoCortexApi.Encoders.EncoderBase.isEncoderLearningEnabled">
            Returns a flag indicating whether encoder learning is enabled.
        </member>
        <member name="P:NeoCortexApi.Encoders.EncoderBase.Width">
            <summary>
             Gets the output width, in bits.
            </summary>
        </member>
        <member name="P:NeoCortexApi.Encoders.EncoderBase.IsDelta">
            <summary>
            Returns true if the underlying encoder works on deltas
            </summary>
        </member>
        <member name="M:NeoCortexApi.Encoders.EncoderBase.Encode(System.Object)">
             Encodes inputData and puts the encoded value into the output array,
             which is a 1-D array of length returned by {@link #getW()}.
            
             Note: The output array is reused, so clear it before updating it.
             @param inputData Data to encode. This should be validated by the encoder.
             @param output 1-D array of same length returned by {@link #getW()}
            
             @return
        </member>
        <member name="M:NeoCortexApi.Encoders.EncoderBase.setLearning(System.Boolean)">
            Set whether learning is enabled.
            @param 	learningEnabled		flag indicating whether learning is enabled
        </member>
        <member name="M:NeoCortexApi.Encoders.EncoderBase.getScalarNames(System.String)">
             Return the field names for each of the scalar values returned by
             .
             @param parentFieldName	parentFieldName The name of the encoder which is our parent. This name
                 						is prefixed to each of the field names within this encoder to form the
                  					keys of the dict() in the retval.
            
             @return
        </member>
        <member name="M:NeoCortexApi.Encoders.EncoderBase.getDecoderOutputFieldTypes">
             Returns a sequence of field types corresponding to the elements in the
             decoded output field array.  The types are defined by {@link FieldMetaType}
            
             @return
        </member>
        <!-- Badly formed XML comment ignored for member "M:NeoCortexApi.Encoders.EncoderBase.getScalars(System.Double)" -->
        <!-- Badly formed XML comment ignored for member "M:NeoCortexApi.Encoders.EncoderBase.getEncodedValues``1(``0)" -->
        <member name="M:NeoCortexApi.Encoders.EncoderBase.getBucketIndices(System.String)">
             Returns an array containing the sub-field bucket indices for
             each sub-field of the inputData. To get the associated field names for each of
             the buckets, call getScalarNames().
             @param  	input 	The data from the source. This is typically a object with members.
            
             @return 	array of bucket indices
        </member>
        <member name="M:NeoCortexApi.Encoders.EncoderBase.getBucketIndices(System.Double)">
             Returns an array containing the sub-field bucket indices for
             each sub-field of the inputData. To get the associated field names for each of
             the buckets, call getScalarNames().
             @param  	input 	The data from the source. This is typically a object with members.
            
             @return 	array of bucket indices
        </member>
        <member name="M:NeoCortexApi.Encoders.EncoderBase.scalarsToStr``1(System.Collections.Generic.List{``0},System.Collections.Generic.List{System.String})">
             Return a pretty print string representing the return values from
             getScalars and getScalarNames().
             @param scalarValues 	input values to encode to string
             @param scalarNames 	optional input of scalar names to convert. If None, gets
                              	scalar names from getScalarNames()
            
             @return string representation of scalar values
        </member>
        <member name="M:NeoCortexApi.Encoders.EncoderBase.getDescription">
             This returns a list of tuples, each containing (name, offset).
             The 'name' is a string description of each sub-field, and offset is the bit
             offset of the sub-field for that encoder.
            
             For now, only the 'multi' and 'date' encoders have multiple (name, offset)
             pairs. All other encoders have a single pair, where the offset is 0.
            
             @return		list of tuples, each containing (name, offset)
        </member>
        <member name="M:NeoCortexApi.Encoders.EncoderBase.encodedBitDescription(System.Int32,System.Boolean)">
             Return a description of the given bit in the encoded output.
             This will include the field name and the offset within the field.
             @param bitOffset  	Offset of the bit to get the description of
             @param formatted     If True, the bitOffset is w.r.t. formatted output,
                                 	which includes separators
            
             @return tuple(fieldName, offsetWithinField)
        </member>
        <member name="M:NeoCortexApi.Encoders.EncoderBase.printHeader(System.String)">
            Pretty-print a header that labels the sub-fields of the encoded
            output. This can be used in conjunction with {@link #pprint(int[], String)}.
            @param prefix
        </member>
        <member name="M:NeoCortexApi.Encoders.EncoderBase.decode(System.Int32[],System.String)">
             Takes an encoded output and does its best to work backwards and generate
             the input that would have generated it.
            
             In cases where the encoded output contains more ON bits than an input
             would have generated, this routine will return one or more ranges of inputs
             which, if their encoded outputs were ORed together, would produce the
             target output. This behavior makes this method suitable for doing things
             like generating a description of a learned coincidence in the SP, which
             in many cases might be a union of one or more inputs.
            
             If instead, you want to figure the *most likely* single input scalar value
             that would have generated a specific encoded output, use the topDownCompute()
             method.
            
             If you want to pretty print the return value from this method, use the
             decodedToStr() method.
            
            ************
             OUTPUT EXPLAINED:
            
             fieldsMap is a {@link Map} where the keys represent field names
             (only 1 if this is a simple encoder, > 1 if this is a multi
             or date encoder) and the values are the result of decoding each
             field. If there are  no bits in encoded that would have been
             generated by a field, it won't be present in the Map. The
             key of each entry in the dict is formed by joining the passed in
             parentFieldName with the child encoder name using a '.'.
            
             Each 'value' in fieldsMap consists of a {@link Tuple} of (ranges, desc),
             where ranges is a list of one or more {@link MinMax} ranges of
             input that would generate bits in the encoded output and 'desc'
             is a comma-separated pretty print description of the ranges.
             For encoders like the category encoder, the 'desc' will contain
             the category names that correspond to the scalar values included
             in the ranges.
            
             The fieldOrder is a list of the keys from fieldsMap, in the
             same order as the fields appear in the encoded output.
            
             Example retvals for a scalar encoder:
            
               {'amount':  ( [[1,3], [7,10]], '1-3, 7-10' )}
               {'amount':  ( [[2.5,2.5]],     '2.5'       )}
            
             Example retval for a category encoder:
            
               {'country': ( [[1,1], [5,6]], 'US, GB, ES' )}
            
             Example retval for a multi encoder:
            
               {'amount':  ( [[2.5,2.5]],     '2.5'       ),
               'country': ( [[1,1], [5,6]],  'US, GB, ES' )}
             @param encoded      		The encoded output that you want decode
             @param parentFieldName 	The name of the encoder which is our parent. This name
                  					is prefixed to each of the field names within this encoder to form the
                						keys of the {@link Map} returned.
            
             @returns Tuple(fieldsMap, fieldOrder)
        </member>
        <member name="M:NeoCortexApi.Encoders.EncoderBase.decodedToStr(System.Tuple{System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.List{System.String}})">
             Return a pretty print string representing the return value from decode().
            
             @param decodeResults
             @return
        </member>
        <member name="M:NeoCortexApi.Encoders.EncoderBase.getBucketValues``1">
             Returns a list of items, one for each bucket defined by this encoder.
             Each item is the value assigned to that bucket, this is the same as the
             EncoderResult.value that would be returned by getBucketInfo() for that
             bucket and is in the same format as the input that would be passed to
             encode().
            
             This call is faster than calling getBucketInfo() on each bucket individually
             if all you need are the bucket values.
            
             @param	returnType 		class type parameter so that this method can return encoder
             							specific value types
            
             @return  list of items, each item representing the bucket value for that
                      bucket.
        </member>
        <member name="M:NeoCortexApi.Encoders.EncoderBase.getBucketInfo(System.Int32[])">
             Returns a list of {@link Encoding}s describing the inputs for
             each sub-field that correspond to the bucket indices passed in 'buckets'.
             To get the associated field names for each of the values, call getScalarNames().
             @param buckets 	The list of bucket indices, one for each sub-field encoder.
                          	These bucket indices for example may have been retrieved
                          	from the getBucketIndices() call.
            
             @return A list of {@link Encoding}s. Each EncoderResult has
        </member>
        <member name="M:NeoCortexApi.Encoders.EncoderBase.topDownCompute(System.Int32[])">
             Returns a list of EncoderResult named tuples describing the top-down
             best guess inputs for each sub-field given the encoded output. These are the
             values which are most likely to generate the given encoded output.
             To get the associated field names for each of the values, call
             getScalarNames().
             @param encoded The encoded output. Typically received from the topDown outputs
                          from the spatial pooler just above us.
            
             @returns A list of EncoderResult named tuples. Each EncoderResult has
                    three attributes:
            
                    -# value:         This is the best-guess value for the sub-field
                                      in a format that is consistent with the type
                                      specified by getDecoderOutputFieldTypes().
                                      Note that this value is not necessarily
                                      numeric.
            
                    -# scalar:        The scalar representation of this best-guess
                                      value. This number is consistent with what
                                      is returned by getScalars(). This value is
                                      always an int or float, and can be used for
                                      numeric comparisons.
            
                    -# encoding       This is the encoded bit-array
                                      that represents the best-guess value.
                                      That is, if 'value' was passed to
                                      encode(), an identical bit-array should be
                                      returned.
        </member>
        <member name="M:NeoCortexApi.Encoders.EncoderBase.rightVecProd(NeoCortexApi.Entities.SparseObjectMatrix{System.Int32[]},System.Int32[])">
             Returns an array containing the sum of the right
             applied multiplications of each slice to the array
             passed in.
            
             @param encoded
             @return
        </member>
        <member name="M:NeoCortexApi.Encoders.EncoderBase.getDisplayWidth">
             Calculate width of display for bits plus blanks between fields.
            
             @return	width
        </member>
        <member name="T:NeoCortexApi.Encoders.FieldMetaType">
            <summary>
            Predefined types
            </summary>
        </member>
        <member name="F:NeoCortexApi.Encoders.FieldMetaType.m_FieldTypeString">
            String representation to be used when a display
            String is required.
        </member>
        <member name="M:NeoCortexApi.Encoders.FieldMetaType.#ctor(System.String)">
            Private constructor 
        </member>
        <member name="M:NeoCortexApi.Encoders.FieldMetaType.newEncoder">
            Returns the {@link Encoder} matching this field type.
            @return
        </member>
        <member name="M:NeoCortexApi.Encoders.FieldMetaType.display">
            Returns the display string
            @return the display string
        </member>
        <member name="M:NeoCortexApi.Encoders.FieldMetaType.fromString(System.String)">
            Parses the specified String and returns a {@link FieldMetaType}
            representing the passed in value.
            
            @param s  the type in string form
            @return the FieldMetaType indicated or the default: {@link FieldMetaType#FLOAT}.
        </member>
        <!-- Badly formed XML comment ignored for member "T:NeoCortexApi.Entities.AbstractFlatMatrix`1" -->
        <member name="M:NeoCortexApi.Entities.AbstractFlatMatrix`1.#ctor(System.Int32[])">
            Constructs a new {@link AbstractFlatMatrix} object to be configured with specified
            dimensions and major ordering.
            @param dimensions  the dimensions of this matrix	
        </member>
        <member name="M:NeoCortexApi.Entities.AbstractFlatMatrix`1.#ctor(System.Int32[],System.Boolean)">
            Constructs a new {@link AbstractFlatMatrix} object to be configured with specified
            dimensions and major ordering.
            
            @param dimensions				the dimensions of this sparse array	
            @param useColumnMajorOrdering	flag indicating whether to use column ordering or
            									row major ordering. if false (the default), then row
            									major ordering will be used. If true, then column major
            									ordering will be used.
        </member>
        <member name="M:NeoCortexApi.Entities.AbstractFlatMatrix`1.computeIndex(System.Int32[])">
            Compute the flat index of a multidimensional array.
            @param indexes multidimensional indexes
            @return the flat array index;
        </member>
        <member name="M:NeoCortexApi.Entities.AbstractFlatMatrix`1.computeIndex(System.Int32[],System.Boolean)">
            Returns a flat index computed from the specified coordinates
            which represent a "dimensioned" index.
            
            @param   coordinates     an array of coordinates
            @param   doCheck         enforce validated comparison to locally stored dimensions
            @return  a flat index
        </member>
        <member name="M:NeoCortexApi.Entities.AbstractFlatMatrix`1.checkDims(System.Int32[])">
            Checks the indexes specified to see whether they are within the
            configured bounds and size parameters of this array configuration.
            
            @param index the array dimensions to check
        </member>
        <member name="M:NeoCortexApi.Entities.AbstractFlatMatrix`1.computeCoordinates(System.Int32)">
            Returns an array of coordinates calculated from
            a flat index.
            
            @param   index   specified flat index
            @return  a coordinate array
        </member>
        <member name="M:NeoCortexApi.Entities.AbstractFlatMatrix`1.initDimensionMultiples(System.Int32[])">
            Initializes internal helper array which is used for multidimensional
            index computation.
            @param dimensions matrix dimensions
            @return array for use in coordinates to flat index computation.
        </member>
        <member name="M:NeoCortexApi.Entities.AbstractFlatMatrix`1.copyInnerArray(System.Int32[])">
            Utility method to shrink a single dimension array by one index.
            @param array the array to shrink
            @return
        </member>
        <member name="M:NeoCortexApi.Entities.AbstractFlatMatrix`1.reverse(System.Int32[])">
            Reverses the specified array.
            @param input
            @return
        </member>
        <member name="M:NeoCortexApi.Entities.AbstractFlatMatrix`1.print1DArray(System.Object)">
            Prints the specified array to a returned String.
            
            @param aObject   the array object to print.
            @return  the array in string form suitable for display.
        </member>
        <member name="F:NeoCortexApi.Entities.AbstractSparseBinaryMatrix.serialVersionUID">
            keep it simple 
        </member>
        <member name="M:NeoCortexApi.Entities.AbstractSparseBinaryMatrix.#ctor(System.Int32[])">
            Constructs a new {@code AbstractSparseBinaryMatrix} with the specified
            dimensions (defaults to row major ordering)
            
            @param dimensions    each indexed value is a dimension size
        </member>
        <member name="M:NeoCortexApi.Entities.AbstractSparseBinaryMatrix.#ctor(System.Int32[],System.Boolean)">
            Constructs a new {@code AbstractSparseBinaryMatrix} with the specified dimensions,
            allowing the specification of column major ordering if desired. 
            (defaults to row major ordering)
            
            @param dimensions                each indexed value is a dimension size
            @param useColumnMajorOrdering    if true, indicates column first iteration, otherwise
                                             row first iteration is the default (if false).
        </member>
        <member name="M:NeoCortexApi.Entities.AbstractSparseBinaryMatrix.getSlice(System.Int32[])">
            Returns the slice specified by the passed in coordinates.
            The array is returned as an object, therefore it is the caller's
            responsibility to cast the array to the appropriate dimensions.
            
            @param coordinates	the coordinates which specify the returned array
            @return	the array specified
            @throws	IllegalArgumentException if the specified coordinates address
            			an actual value instead of the array holding it.
        </member>
        <member name="M:NeoCortexApi.Entities.AbstractSparseBinaryMatrix.sliceError(System.Int32[])">
            Launch getSlice error, to share it with subclass {@link #getSlice(int...)}
            implementations.
            @param coordinates
        </member>
        <member name="M:NeoCortexApi.Entities.AbstractSparseBinaryMatrix.getSliceIndexes(System.Int32[])">
            Calculate the flat indexes of a slice
            @return the flat indexes array
        </member>
        <member name="M:NeoCortexApi.Entities.AbstractSparseBinaryMatrix.rightVecSumAtNZ(System.Int32[],System.Int32[])">
            Fills the specified results array with the result of the 
            matrix vector multiplication.
            
            @param inputVector		the right side vector
            @param results			the results array
        </member>
        <member name="M:NeoCortexApi.Entities.AbstractSparseBinaryMatrix.rightVecSumAtNZ(System.Int32[],System.Int32[],System.Double)">
            Fills the specified results array with the result of the 
            matrix vector multiplication.
            
            @param inputVector       the right side vector
            @param results           the results array
        </member>
        <member name="M:NeoCortexApi.Entities.AbstractSparseBinaryMatrix.set(System.Int32,System.Int32)">
            Sets the value at the specified index.
            
            @param index     the index the object will occupy
            @param object    the object to be indexed.
        </member>
        <member name="M:NeoCortexApi.Entities.AbstractSparseBinaryMatrix.set(System.Int32,System.Int32[])">
            Sets the value to be indexed at the index
            computed from the specified coordinates.
            @param coordinates   the row major coordinates [outer --> ,...,..., inner]
            @param object        the object to be indexed.
        </member>
        <member name="M:NeoCortexApi.Entities.AbstractSparseBinaryMatrix.set(System.Int32[],System.Int32[])">
            Sets the specified values at the specified indexes.
            
            @param indexes   indexes of the values to be set
            @param values    the values to be indexed.
            
            @return this {@code SparseMatrix} implementation
        </member>
        <member name="M:NeoCortexApi.Entities.AbstractSparseBinaryMatrix.setForTest(System.Int32,System.Int32)">
            Sets the value at the specified index skipping the automatic
            truth statistic tallying of the real method.
            
            @param index     the index the object will occupy
            @param object    the object to be indexed.
        </member>
        <member name="M:NeoCortexApi.Entities.AbstractSparseBinaryMatrix.set(System.Int32[],System.Int32[],System.Boolean)">
            Call This for TEST METHODS ONLY
            Sets the specified values at the specified indexes.
            
            @param indexes   indexes of the values to be set
            @param values    the values to be indexed.
            
            @return this {@code SparseMatrix} implementation
        </member>
        <member name="M:NeoCortexApi.Entities.AbstractSparseBinaryMatrix.getTrueCount(System.Int32)">
            Returns the count of 1's set on the specified row.
            @param index
            @return
        </member>
        <member name="M:NeoCortexApi.Entities.AbstractSparseBinaryMatrix.setTrueCount(System.Int32,System.Int32)">
            Sets the count of 1's on the specified row.
            @param index
            @param count
        </member>
        <member name="M:NeoCortexApi.Entities.AbstractSparseBinaryMatrix.getTrueCounts">
            Get the true counts for all outer indexes.
            @return
        </member>
        <member name="M:NeoCortexApi.Entities.AbstractSparseBinaryMatrix.clearStatistics(System.Int32)">
            Clears the true counts prior to a cycle where they're
            being set
        </member>
        <member name="M:NeoCortexApi.Entities.AbstractSparseBinaryMatrix.getIntValue(System.Int32[])">
            Returns the int value at the index computed from the specified coordinates.
            For example value {7, 21} is TRU if the column 7 is connected to input bit 21.
            @param coordinates   the coordinates from which to retrieve the indexed object
            @return  the indexed object
        </member>
        <member name="M:NeoCortexApi.Entities.AbstractSparseBinaryMatrix.getIntValue(System.Int32)">
            Returns the T at the specified index.
            
            @param index     the index of the T to return
            @return  the T at the specified index.
        </member>
        <member name="M:NeoCortexApi.Entities.AbstractSparseBinaryMatrix.getSparseIndices">
            Returns a sorted array of occupied indexes.
            @return  a sorted array of occupied indexes.
        </member>
        <member name="M:NeoCortexApi.Entities.AbstractSparseBinaryMatrix.or(NeoCortexApi.Entities.AbstractSparseBinaryMatrix)">
            This {@code SparseBinaryMatrix} will contain the operation of or-ing
            the inputMatrix with the contents of this matrix; returning this matrix
            as the result.
            
            @param inputMatrix   the matrix containing the "on" bits to or
            @return  this matrix
        </member>
        <member name="M:NeoCortexApi.Entities.AbstractSparseBinaryMatrix.or(System.Collections.Generic.List{System.Int32})">
            This {@code SparseBinaryMatrix} will contain the operation of or-ing
            the sparse list with the contents of this matrix; returning this matrix
            as the result.
            
            @param onBitIndexes  the matrix containing the "on" bits to or
            @return  this matrix
        </member>
        <member name="M:NeoCortexApi.Entities.AbstractSparseBinaryMatrix.or(System.Int32[])">
            This {@code SparseBinaryMatrix} will contain the operation of or-ing
            the sparse array with the contents of this matrix; returning this matrix
            as the result.
            
            @param onBitIndexes  the int array containing the "on" bits to or
            @return  this matrix
        </member>
        <member name="M:NeoCortexApi.Entities.AbstractSparseBinaryMatrix.All(NeoCortexApi.Entities.AbstractSparseBinaryMatrix)">
            Returns true if the on bits of the specified matrix are
            matched by the on bits of this matrix. It is allowed that 
            this matrix have more on bits than the specified matrix.
            
            @param matrix
            @return
        </member>
        <member name="M:NeoCortexApi.Entities.AbstractSparseBinaryMatrix.All(System.Collections.Generic.List{System.Int32})">
            Returns true if the on bits of the specified list are
            matched by the on bits of this matrix. It is allowed that 
            this matrix have more on bits than the specified matrix.
            
            @param matrix
            @return
        </member>
        <member name="M:NeoCortexApi.Entities.AbstractSparseBinaryMatrix.All(System.Int32[])">
            Returns true if the on bits of the specified array are
            matched by the on bits of this matrix. It is allowed that 
            this matrix have more on bits than the specified matrix.
            
            @param matrix
            @return
        </member>
        <member name="M:NeoCortexApi.Entities.AbstractSparseBinaryMatrix.any(NeoCortexApi.Entities.AbstractSparseBinaryMatrix)">
            Returns true if any of the on bits of the specified matrix are
            matched by the on bits of this matrix. It is allowed that 
            this matrix have more on bits than the specified matrix.
            
            @param matrix
            @return
        </member>
        <member name="M:NeoCortexApi.Entities.AbstractSparseBinaryMatrix.any(System.Collections.Generic.HashSet{System.Int32})">
            Returns true if any of the on bit indexes of the specified collection are
            matched by the on bits of this matrix. It is allowed that 
            this matrix have more on bits than the specified matrix.
            
            @param matrix
            @return
        </member>
        <member name="M:NeoCortexApi.Entities.AbstractSparseBinaryMatrix.any(System.Int32[])">
            Returns true if any of the on bit indexes of the specified matrix are
            matched by the on bits of this matrix. It is allowed that 
            this matrix have more on bits than the specified matrix.
            
            @param matrix
            @return
        </member>
        <!-- Badly formed XML comment ignored for member "T:NeoCortexApi.Entities.AbstractSparseMatrix`1" -->
        <member name="M:NeoCortexApi.Entities.AbstractSparseMatrix`1.#ctor(System.Int32[])">
            Constructs a new {@code AbstractSparseMatrix} with the specified
            dimensions (defaults to row major ordering)
            
            @param dimensions    each indexed value is a dimension size
        </member>
        <member name="M:NeoCortexApi.Entities.AbstractSparseMatrix`1.#ctor(System.Int32[],System.Boolean)">
            Constructs a new {@code AbstractSparseMatrix} with the specified dimensions,
            allowing the specification of column major ordering if desired. 
            (defaults to row major ordering)
            
            @param dimensions                each indexed value is a dimension size
            @param useColumnMajorOrdering    if true, indicates column first iteration, otherwise
                                             row first iteration is the default (if false).
        </member>
        <member name="M:NeoCortexApi.Entities.AbstractSparseMatrix`1.set(System.Int32,`0)">
            Sets the object to occupy the specified index.
            
            @param index     the index the object will occupy
            @param value     the value to be indexed.
            
            @return this {@code SparseMatrix} implementation
        </member>
        <member name="M:NeoCortexApi.Entities.AbstractSparseMatrix`1.Set(System.Int32,System.Double)">
            Sets the object to occupy the specified index.
            
            @param index     the index the object will occupy
            @param value     the value to be indexed.
            
            @return this {@code SparseMatrix} implementation
        </member>
        <member name="M:NeoCortexApi.Entities.AbstractSparseMatrix`1.Set(System.Int32[],`0)">
            Sets the specified object to be indexed at the index
            computed from the specified coordinates.
            @param object        the object to be indexed.
            @param coordinates   the row major coordinates [outer --> ,...,..., inner]
            
            @return this {@code SparseMatrix} implementation
        </member>
        <member name="M:NeoCortexApi.Entities.AbstractSparseMatrix`1.set(System.Int32,System.Int32[])">
            Sets the specified object to be indexed at the index
            computed from the specified coordinates.
            @param value         the value to be indexed.
            @param coordinates   the row major coordinates [outer --> ,...,..., inner]
            
            @return this {@code SparseMatrix} implementation
        </member>
        <member name="M:NeoCortexApi.Entities.AbstractSparseMatrix`1.Set(System.Double,System.Int32[])">
            Sets the specified object to be indexed at the index
            computed from the specified coordinates.
            @param value         the value to be indexed.
            @param coordinates   the row major coordinates [outer --> ,...,..., inner]
            
            @return this {@code SparseMatrix} implementation
        </member>
        <member name="M:NeoCortexApi.Entities.AbstractSparseMatrix`1.getObject(System.Int32)">
            Returns the T at the specified index.
            
            @param index     the index of the T to return
            @return  the T at the specified index.
        </member>
        <member name="M:NeoCortexApi.Entities.AbstractSparseMatrix`1.getIntValue(System.Int32)">
            Returns the T at the specified index.
            
            @param index     the index of the T to return
            @return  the T at the specified index.
        </member>
        <member name="M:NeoCortexApi.Entities.AbstractSparseMatrix`1.getDoubleValue(System.Int32)">
            Returns the T at the specified index.
            
            @param index     the index of the T to return
            @return  the T at the specified index.
        </member>
        <member name="M:NeoCortexApi.Entities.AbstractSparseMatrix`1.get(System.Int32[])">
            Returns the T at the index computed from the specified coordinates
            @param coordinates   the coordinates from which to retrieve the indexed object
            @return  the indexed object
        </member>
        <member name="M:NeoCortexApi.Entities.AbstractSparseMatrix`1.getIntValue(System.Int32[])">
            Returns the int value at the index computed from the specified coordinates
            @param coordinates   the coordinates from which to retrieve the indexed object
            @return  the indexed object
        </member>
        <member name="M:NeoCortexApi.Entities.AbstractSparseMatrix`1.getDoubleValue(System.Int32[])">
            Returns the double value at the index computed from the specified coordinates
            @param coordinates   the coordinates from which to retrieve the indexed object
            @return  the indexed object
        </member>
        <member name="M:NeoCortexApi.Entities.AbstractSparseMatrix`1.visit(System.Int32[],System.Int32,System.Int32[],System.Collections.Generic.List{System.Int32})">
            Recursively loops through the matrix dimensions to fill the results
            array with flattened computed array indexes.
            
            @param bounds
            @param currentDimension
            @param p
            @param results
        </member>
        <member name="M:NeoCortexApi.Entities.AbstractSparseMatrix`1.fill(NeoCortexApi.ITypeFactory{`0},System.Int32,System.Int32[],System.Int32,System.Object[])">
            Uses reflection to create and fill a dynamically created multidimensional array.
            
            @param f                 the {@link TypeFactory}
            @param dimensionIndex    the current index into <em>this class's</em> configured dimensions array
                                     <em>*NOT*</em> the dimensions used as this method's argument    
            @param dimensions        the array specifying remaining dimensions to create
            @param count             the current dimensional size
            @param arr               the array to fill
            @return a dynamically created multidimensional array
        </member>
        <member name="T:NeoCortexApi.Entities.BurstingTupple">
            <summary>
            Helper entity for column bursting.
            </summary>
        </member>
        <member name="P:NeoCortexApi.Entities.BurstingTupple.Cells">
            <summary>
             List of the processed column's cells.
            </summary>
        </member>
        <member name="P:NeoCortexApi.Entities.BurstingTupple.BestCell">
            <summary>
            Best rated cell.
            </summary>
        </member>
        <member name="T:NeoCortexApi.Entities.Cell">
            <summary>
            Defines a single cell (neuron).
            </summary>
        </member>
        <member name="F:NeoCortexApi.Entities.Cell.serialVersionUID">
            keep it simple 
        </member>
        <member name="F:NeoCortexApi.Entities.Cell.index">
            This cell's index 
        </member>
        <member name="F:NeoCortexApi.Entities.Cell.boxedIndex">
            Remove boxing where necessary 
        </member>
        <member name="F:NeoCortexApi.Entities.Cell.column">
            The owning {@link Column} 
        </member>
        <member name="F:NeoCortexApi.Entities.Cell.m_Hashcode">
            Cash this because Cells are immutable 
        </member>
        <member name="M:NeoCortexApi.Entities.Cell.#ctor(NeoCortexApi.Entities.Column,System.Int32)">
            Constructs a new {@code Cell} object
            @param column    the containing {@link Column}
            @param colSeq    this index of this {@code Cell} within its column
        </member>
        <member name="M:NeoCortexApi.Entities.Cell.getIndex">
            Returns this {@code Cell}'s index.
            @return
        </member>
        <member name="M:NeoCortexApi.Entities.Cell.getColumn">
            Returns the column within which this cell resides
            @return
        </member>
        <member name="M:NeoCortexApi.Entities.Cell.getReceptorSynapses(NeoCortexApi.Entities.Connections)">
            Returns the Set of {@link Synapse}s which have this cell
            as their source cells.
             
            @param   c               the connections state of the temporal memory
                                     return an orphaned empty set.
            @return  the Set of {@link Synapse}s which have this cell
                     as their source cells.
        </member>
        <member name="M:NeoCortexApi.Entities.Cell.getReceptorSynapses(NeoCortexApi.Entities.Connections,System.Boolean)">
            Returns the Set of {@link Synapse}s which have this cell
            as their source cells.
             
            @param   c               the connections state of the temporal memory
            @param doLazyCreate      create a container for future use if true, if false
                                     return an orphaned empty set.
            @return  the Set of {@link Synapse}s which have this cell
                     as their source cells.
        </member>
        <member name="M:NeoCortexApi.Entities.Cell.getSegments(NeoCortexApi.Entities.Connections)">
            Returns a {@link List} of this {@code Cell}'s {@link DistalDendrite}s
            
            @param   c               the connections state of the temporal memory
            @param doLazyCreate      create a container for future use if true, if false
                                     return an orphaned empty set.
            @return  a {@link List} of this {@code Cell}'s {@link DistalDendrite}s
        </member>
        <member name="M:NeoCortexApi.Entities.Cell.getSegments(NeoCortexApi.Entities.Connections,System.Boolean)">
            Returns a {@link List} of this {@code Cell}'s {@link DistalDendrite}s
            
            @param   c               the connections state of the temporal memory
            @param doLazyCreate      create a container for future use if true, if false
                                     return an orphaned empty set.
            @return  a {@link List} of this {@code Cell}'s {@link DistalDendrite}s
        </member>
        <member name="M:NeoCortexApi.Entities.Cell.GetHashCode">
            **
        </member>
        <member name="M:NeoCortexApi.Entities.Cell.CompareTo(NeoCortexApi.Entities.Cell)">
            <summary>
            Compares two cells.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="T:NeoCortexApi.Entities.Column">
             Abstraction of both an input bit and a columnal collection of
             {@link Cell}s which have behavior associated with membership to
             a given {@code Column}
             
             @author Chetan Surpur
             @author David Ray
            
        </member>
        <member name="F:NeoCortexApi.Entities.Column.serialVersionUID">
            keep it simple 
        </member>
        <member name="F:NeoCortexApi.Entities.Column.index">
            The flat non-topological index of this column 
        </member>
        <member name="F:NeoCortexApi.Entities.Column.boxedIndex">
            Stored boxed form to eliminate need for boxing on the fly 
        </member>
        <member name="F:NeoCortexApi.Entities.Column.numCells">
            Configuration of cell count 
        </member>
        <member name="F:NeoCortexApi.Entities.Column.proximalDendrite">
            Connects {@link SpatialPooler} input pools 
        </member>
        <member name="M:NeoCortexApi.Entities.Column.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new collumn with specified number of cells and a single proximal dendtrite segment.
            </summary>
            <param name="numCells">Number of cells in the column.</param>
            <param name="index">Colun index.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:NeoCortexApi.Entities.Column.getCell(System.Int32)" -->
        <member name="M:NeoCortexApi.Entities.Column.getCells">
            Returns a {@link List} view of this {@code Column}'s {@link Cell}s.
            @return
        </member>
        <member name="M:NeoCortexApi.Entities.Column.getIndex">
            Returns the index of this {@code Column}
            @return  the index of this {@code Column}
        </member>
        <member name="M:NeoCortexApi.Entities.Column.getNumCellsPerColumn">
            Returns the configured number of cells per column for
            all {@code Column} objects within the current {@link TemporalMemory}
            @return
        </member>
        <member name="M:NeoCortexApi.Entities.Column.getLeastUsedCell(NeoCortexApi.Entities.Connections,System.Random)">
            Returns the {@link Cell} with the least number of {@link DistalDendrite}s.
            
            @param c         the connections state of the temporal memory
            @param random
            @return
        </member>
        <member name="M:NeoCortexApi.Entities.Column.getProximalDendrite">
            Returns this {@code Column}'s single {@link ProximalDendrite}
            @return
        </member>
        <member name="M:NeoCortexApi.Entities.Column.createPotentialPool(NeoCortexApi.Entities.Connections,System.Int32[])">
            This method creates connections between columns and inputs.
            It delegates the potential synapse creation to the one {@link ProximalDendrite}.
            
            @param c						the {@link Connections} memory
            @param inputVectorIndexes	indexes specifying the input vector bit
        </member>
        <member name="M:NeoCortexApi.Entities.Column.setProximalPermanences(NeoCortexApi.Entities.Connections,System.Double[])">
            Sets the permanences on the {@link ProximalDendrite} {@link Synapse}s
            
            @param c				the {@link Connections} memory object
            @param permanences	floating point degree of connectedness
        </member>
        <member name="M:NeoCortexApi.Entities.Column.setProximalPermanencesSparse(NeoCortexApi.Entities.Connections,System.Double[],System.Int32[])">
            Sets the permanences on the {@link ProximalDendrite} {@link Synapse}s
            
            @param c				the {@link Connections} memory object
            @param permanences	floating point degree of connectedness
        </member>
        <member name="M:NeoCortexApi.Entities.Column.setProximalConnectedSynapsesForTest(NeoCortexApi.Entities.Connections,System.Int32[])">
            Delegates the call to set synapse connected indexes to this 
            {@code Column}'s {@link ProximalDendrite}
            @param c
            @param connections
        </member>
        <member name="M:NeoCortexApi.Entities.Column.toString">
            {@inheritDoc}
        </member>
        <member name="F:NeoCortexApi.Entities.Column.m_Hashcode">
            {@inheritDoc}
            @param otherColumn     the {@code Column} to compare to
            @return
        </member>
        <member name="M:NeoCortexApi.Entities.Column.ToString">
            <summary>
            Gets readable version of cell.
            </summary>
            <returns></returns>
        </member>
        <member name="T:NeoCortexApi.Entities.ComputeCycle">
            Contains a snapshot of the state attained during one computational
            call to the {@link TemporalMemory}. The {@code TemporalMemory} uses
            data from previous compute cycles to derive new data for the current cycle
            through a comparison between states of those different cycles, therefore
            this state container is necessary.
            
            @author David Ray
        </member>
        <member name="P:NeoCortexApi.Entities.ComputeCycle.activeCells">
            <summary>
            Gets the list of active cells.
            </summary>
        </member>
        <member name="P:NeoCortexApi.Entities.ComputeCycle.winnerCells">
            <summary>
            Gets the list of winner cells.
            </summary>
        </member>
        <member name="M:NeoCortexApi.Entities.ComputeCycle.#ctor">
            Constructs a new {@code ComputeCycle}
        </member>
        <member name="M:NeoCortexApi.Entities.ComputeCycle.#ctor(NeoCortexApi.Entities.Connections)">
            Constructs a new {@code ComputeCycle} initialized with
            the connections relevant to the current calling {@link Thread} for
            the specified {@link TemporalMemory}
            
            @param   c       the current connections state of the TemporalMemory
        </member>
        <member name="P:NeoCortexApi.Entities.ComputeCycle.predictiveCells">
            Returns the current {@link Set} of active cells
            
            @return  the current {@link Set} of active cells
            Returns the {@link List} of sorted predictive cells.
            @return
        </member>
        <member name="T:NeoCortexApi.Entities.Connections">
             Contains the definition of the interconnected structural state of the {@link SpatialPooler} and
             {@link TemporalMemory} as well as the state of all support structures
             (i.e. Cells, Columns, Segments, Synapses etc.).
            
             In the separation of data from logic, this class represents the data/state.
        </member>
        <member name="F:NeoCortexApi.Entities.Connections.serialVersionUID">
            keep it simple 
        </member>
        <member name="F:NeoCortexApi.Entities.Connections.potentialRadius">
            <b>WARNING:</b> potentialRadius **must** be set to 
            the inputWidth if using "globalInhibition" and if not 
            using the Network API (which sets this automatically) 
        </member>
        <member name="F:NeoCortexApi.Entities.Connections.inputTopology">
            Manages input neighborhood transformations 
        </member>
        <member name="F:NeoCortexApi.Entities.Connections.columnTopology">
            Manages column neighborhood transformations 
        </member>
        <member name="F:NeoCortexApi.Entities.Connections.inputMatrix">
            A matrix representing the shape of the input. 
        </member>
        <member name="F:NeoCortexApi.Entities.Connections.potentialPools">
            Store the set of all inputs that are within each column's potential pool.
            'potentialPools' is a matrix, whose rows represent cortical columns, and
            whose columns represent the input bits. if potentialPools[i][j] == 1,
            then input bit 'j' is in column 'i's potential pool. A column can only be
            connected to inputs in its potential pool. The indices refer to a
            flattened version of both the inputs and columns. Namely, irrespective
            of the topology of the inputs and columns, they are treated as being a
            one dimensional array. Since a column is typically connected to only a
            subset of the inputs, many of the entries in the matrix are 0. Therefore
            the potentialPool matrix is stored using the SparseObjectMatrix
            class, to reduce memory footprint and computation time of algorithms that
            require iterating over the data structure.
        </member>
        <member name="F:NeoCortexApi.Entities.Connections.tieBreaker">
            Initialize a tiny random tie breaker. This is used to determine winning
            columns where the overlaps are identical.
        </member>
        <member name="F:NeoCortexApi.Entities.Connections.connectedCounts">
            Stores the number of connected synapses for each column. This is simply
            a sum of each row of 'connectedSynapses'. again, while this
            information is readily available from 'connectedSynapses', it is
            stored separately for efficiency purposes.
        </member>
        <member name="F:NeoCortexApi.Entities.Connections.m_InhibitionRadius">
            The inhibition radius determines the size of a column's local
            neighborhood. of a column. A cortical column must overcome the overlap
            score of columns in its neighborhood in order to become actives. This
            radius is updated every learning round. It grows and shrinks with the
            average number of connected synapses per column.
        </member>
        <member name="F:NeoCortexApi.Entities.Connections.columnDimensions">
            Total number of columns 
        </member>
        <member name="F:NeoCortexApi.Entities.Connections.cellsPerColumn">
            Total number of cells per column 
        </member>
        <member name="F:NeoCortexApi.Entities.Connections.inputDimensions">
            What will comprise the Layer input. Input (i.e. from encoder) 
        </member>
        <member name="F:NeoCortexApi.Entities.Connections.activationThreshold">
            If the number of active connected synapses on a segment
            is at least this threshold, the segment is said to be active.
        </member>
        <member name="F:NeoCortexApi.Entities.Connections.learningRadius">
            Radius around cell from which it can
            sample to form distal {@link DistalDendrite} connections.
        </member>
        <member name="F:NeoCortexApi.Entities.Connections.minThreshold">
            If the number of synapses active on a segment is at least this
            threshold, it is selected as the best matching
            cell in a bursting column.
        </member>
        <member name="F:NeoCortexApi.Entities.Connections.maxNewSynapseCount">
            The maximum number of synapses added to a segment during learning. 
        </member>
        <member name="F:NeoCortexApi.Entities.Connections.maxSegmentsPerCell">
            The maximum number of segments (distal dendrites) allowed on a cell 
        </member>
        <member name="F:NeoCortexApi.Entities.Connections.maxSynapsesPerSegment">
            The maximum number of synapses allowed on a given segment (distal dendrite) 
        </member>
        <member name="F:NeoCortexApi.Entities.Connections.initialPermanence">
            Initial permanence of a new synapse 
        </member>
        <member name="F:NeoCortexApi.Entities.Connections.connectedPermanence">
            If the permanence value for a synapse
            is greater than this value, it is said
            to be connected.
        </member>
        <member name="F:NeoCortexApi.Entities.Connections.permanenceIncrement">
            Amount by which permanences of synapses
            are incremented during learning.
        </member>
        <member name="F:NeoCortexApi.Entities.Connections.permanenceDecrement">
            Amount by which permanences of synapses
            are decremented during learning.
        </member>
        <member name="F:NeoCortexApi.Entities.Connections.memory">
            The main data structure containing columns, cells, and synapses 
        </member>
        <member name="F:NeoCortexApi.Entities.Connections.receptorSynapses">
            Reverse mapping from source cell to {@link Synapse} 
        </member>
        <member name="F:NeoCortexApi.Entities.Connections.distalSynapses">
            <summary>
            Synapses, which belong to some distal dentrite segment.
            </summary>
        </member>
        <member name="F:NeoCortexApi.Entities.Connections.proximalSynapseCounter">
            Helps index each new proximal Synapse 
        </member>
        <member name="F:NeoCortexApi.Entities.Connections.nextFlatIdx">
            Global tracker of the next available segment index 
        </member>
        <member name="F:NeoCortexApi.Entities.Connections.nextSegmentOrdinal">
            Global counter incremented for each DD segment creation
        </member>
        <member name="F:NeoCortexApi.Entities.Connections.nextSynapseOrdinal">
            Global counter incremented for each DD synapse creation
        </member>
        <member name="P:NeoCortexApi.Entities.Connections.NumSynapses">
            Total number of synapses 
        </member>
        <member name="F:NeoCortexApi.Entities.Connections.freeFlatIdxs">
            <summary>
            Used for destroying of indexes.
            </summary>
        </member>
        <member name="F:NeoCortexApi.Entities.Connections.m_SegmentForFlatIdx">
            <summary>
            Indexed segments by their global index (can contain nulls)
            </summary>
        </member>
        <member name="F:NeoCortexApi.Entities.Connections.lastActivity">
            Stores each cycle's most recent activity 
        </member>
        <member name="F:NeoCortexApi.Entities.Connections.seed">
            The default random number seed 
        </member>
        <member name="F:NeoCortexApi.Entities.Connections.random">
            The random number generator 
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.#ctor">
            Constructs a new {@code OldConnections} object. This object
            is usually configured via the {@link Parameters#apply(Object)}
            method.
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.copy">
            Returns a deep copy of this {@code Connections} object.
            @return a deep copy of this {@code Connections}
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.doSpatialPoolerPostInit">
            Sets the derived values of the {@link SpatialPooler}'s initialization.
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.setSeed(System.Int32)">
             Sets the seed used for the internal random number generator.
             If the generator has been instantiated, this method will initialize
             a new random generator with the specified seed.
            
             @param seed
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.getSeed">
            Returns the configured random number seed
            @return
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.getRandom">
            Returns the thread specific {@link Random} number generator.
            @return
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.setRandom(System.Random)">
            Sets the random number generator.
            @param random
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.getCell(System.Int32)">
            Returns the {@link Cell} specified by the index passed in.
            @param index     of the specified cell to return.
            @return
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.getCells">
            Returns an array containing all of the {@link Cell}s.
            @return
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.setCells(NeoCortexApi.Entities.Cell[])">
            Sets the flat array of cells
            @param cells
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.getCells(System.Int32[])">
             Returns an array containing the {@link Cell}s specified
             by the passed in indexes.
            
             @param cellIndexes   indexes of the Cells to return
             @return
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.getCellSet(System.Int32[])">
             Returns a {@link LinkedHashSet} containing the {@link Cell}s specified
             by the passed in indexes.
            
             @param cellIndexes   indexes of the Cells to return
             @return
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.setMemory(NeoCortexApi.Entities.SparseObjectMatrix{NeoCortexApi.Entities.Column})">
            Sets the matrix containing the {@link Column}s
            @param mem
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.getMemory">
            Returns the matrix containing the {@link Column}s
            @return
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.getInputTopology">
            Returns the {@link Topology} overseeing input 
            neighborhoods.
            @return 
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.setInputTopology(NeoCortexApi.Utility.Topology)">
            Sets the {@link Topology} overseeing input 
            neighborhoods.
            
            @param topology  the input Topology
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.getColumnTopology">
            Returns the {@link Topology} overseeing {@link Column} 
            neighborhoods.
            @return
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.setColumnTopology(NeoCortexApi.Utility.Topology)">
            Sets the {@link Topology} overseeing {@link Column} 
            neighborhoods.
            
            @param topology  the column Topology
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.getInputMatrix">
            Returns the input column mapping
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.setInputMatrix(NeoCortexApi.Entities.ISparseMatrix{System.Int32})">
            Sets the input column mapping matrix
            @param matrix
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.getInitConnectedPct">
            Returns the configured initial connected percent.
            @return
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.getIterationNum">
            Returns the cycle count.
            @return
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.setIterationNum(System.Int32)">
            Sets the iteration count.
            @param num
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.getUpdatePeriod">
            Returns the period count which is the number of cycles
            between meta information updates.
            @return
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.setUpdatePeriod(System.Int32)">
            Sets the update period
            @param period
        </member>
        <member name="P:NeoCortexApi.Entities.Connections.InhibitionRadius">
            Returns the inhibition radius
            @return
            Sets the inhibition radius
            @param radius
        </member>
        <member name="P:NeoCortexApi.Entities.Connections.NumInputs">
            Returns the product of the input dimensions
            @return  the product of the input dimensions
            Sets the product of the input dimensions to
            establish a flat count of bits in the input field.
            @param n
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.getNumColumns">
            Returns the product of the column dimensions
            @return  the product of the column dimensions
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.setNumColumns(System.Int32)">
            Sets the product of the column dimensions to be
            the column count.
            @param n
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.setPotentialRadius(System.Int32)">
             This parameter determines the extent of the input
             that each column can potentially be connected to.
             This can be thought of as the input bits that
             are visible to each column, or a 'receptiveField' of
             the field of vision. A large enough value will result
             in 'global coverage', meaning that each column
             can potentially be connected to every input bit. This
             parameter defines a square (or hyper square) area: a
             column will have a max square potential pool with
             sides of length 2 * potentialRadius + 1.
             
             <b>WARNING:</b> potentialRadius **must** be set to 
             the inputWidth if using "globalInhibition" and if not 
             using the Network API (which sets this automatically) 
            
            
             @param potentialRadius
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.getPotentialRadius">
            Returns the configured potential radius
            
            @return  the configured potential radius
            @see setPotentialRadius
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.setPotentialPct(System.Double)">
             The percent of the inputs, within a column's
             potential radius, that a column can be connected to.
             If set to 1, the column will be connected to every
             input within its potential radius. This parameter is
             used to give each column a unique potential pool when
             a large potentialRadius causes overlap between the
             columns. At initialization time we choose
             ((2*potentialRadius + 1)^(# inputDimensions) *
             potentialPct) input bits to comprise the column's
             potential pool.
            
             @param potentialPct
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.getPotentialPct">
             Returns the configured potential pct
            
             @return the configured potential pct
             @see setPotentialPct
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.setProximalPermanences(NeoCortexApi.Entities.SparseObjectMatrix{System.Double[]})">
             Sets the {@link SparseObjectMatrix} which represents the
             proximal dendrite permanence values.
            
             @param s the {@link SparseObjectMatrix}
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.getProximalSynapseCount">
            Returns the count of {@link Synapse}s on
            {@link ProximalDendrite}s
            @return
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.setProximalSynapseCount(System.Int32)">
            Sets the count of {@link Synapse}s on
            {@link ProximalDendrite}s
            @param i
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.incrementProximalSynapses">
             Increments and returns the incremented
             proximal {@link Synapse} count.
            
             @return
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.decrementProximalSynapses">
            Decrements and returns the decremented
            proximal {link Synapse} count
            @return
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.getConnectedCounts">
            Returns the indexed count of connected synapses per column.
            @return
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.getConnectedCount(System.Int32)">
            Returns the connected count for the specified column.
            @param columnIndex
            @return
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.setConnectedCounts(System.Int32[])">
            Sets the indexed count of synapses connected at the columns in each index.
            @param counts
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.setConnectedMatrix(NeoCortexApi.Entities.AbstractSparseBinaryMatrix)">
            Sets the connected count {@link AbstractSparseBinaryMatrix}, 
            which defines how synapses are connected to input.
            @param columnIndex
            @param count
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.setTieBreaker(System.Double[])">
             Sets the array holding the random noise added to proximal dendrite overlaps.
            
             @param tieBreaker	random values to help break ties
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.getTieBreaker">
             Returns the array holding random values used to add to overlap scores
             to break ties.
            
             @return
        </member>
        <member name="P:NeoCortexApi.Entities.Connections.GlobalInhibition">
            <summary>
            Enforses using of global inhibition process.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:NeoCortexApi.Entities.Connections.LocalAreaDensity" -->
        <member name="P:NeoCortexApi.Entities.Connections.NumActiveColumnsPerInhArea">
            Returns the configured number of active columns per
            inhibition area.
            @return  the configured number of active columns per
            inhibition area.
            @see setNumActiveColumnsPerInhArea
             An alternate way to control the density of the active
             columns. If numActivePerInhArea is specified then
             localAreaDensity must be less than 0, and vice versa.
             When using numActivePerInhArea, the inhibition logic
             will insure that at most 'numActivePerInhArea'
             columns remain ON within a local inhibition area (the
             size of which is set by the internally calculated
             inhibitionRadius, which is in turn determined from
             the average size of the connected receptive fields of
             all columns). When using this method, as columns
             learn and grow their effective receptive fields, the
             inhibitionRadius will grow, and hence the net density
             of the active columns will *decrease*. This is in
             contrast to the localAreaDensity method, which keeps
             the density of active columns the same regardless of
             the size of their receptive fields.
            
             @param numActiveColumnsPerInhArea
        </member>
        <member name="P:NeoCortexApi.Entities.Connections.StimulusThreshold">
            <summary>
            Minimum number of connected synapses to make column active. Specified as a percent of a fully grown synapse.
            </summary>
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.setSynPermInactiveDec(System.Double)">
             The amount by which an inactive synapse is
             decremented in each round. Specified as a percent of
             a fully grown synapse.
            
             @param synPermInactiveDec
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.getSynPermInactiveDec">
            Returns the synaptic permanence inactive decrement.
            @return  the synaptic permanence inactive decrement.
            @see setSynPermInactiveDec
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.setSynPermActiveInc(System.Double)">
             The amount by which an active synapse is incremented
             in each round. Specified as a percent of a
             fully grown synapse.
            
             @param synPermActiveInc
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.getSynPermActiveInc">
            Returns the configured active permanence increment
            @return the configured active permanence increment
            @see setSynPermActiveInc
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.setSynPermConnected(System.Double)">
             The default connected threshold. Any synapse whose
             permanence value is above the connected threshold is
             a "connected synapse", meaning it can contribute to
             the cell's firing.
            
             @param synPermConnected
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.getSynPermConnected">
            Returns the synapse permanence connected threshold
            @return the synapse permanence connected threshold
            @see setSynPermConnected
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.setSynPermBelowStimulusInc(System.Double)">
            Sets the stimulus increment for synapse permanences below
            the measured threshold.
            @param stim
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.getSynPermBelowStimulusInc">
             Returns the stimulus increment for synapse permanences below
             the measured threshold.
            
             @return
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.setMinPctOverlapDutyCycles(System.Double)">
             A number between 0 and 1.0, used to set a floor on
             how often a column should have at least
             stimulusThreshold active inputs. Periodically, each
             column looks at the overlap duty cycle of
             all other columns within its inhibition radius and
             sets its own internal minimal acceptable duty cycle
             to: minPctDutyCycleBeforeInh * max(other columns'
             duty cycles).
             On each iteration, any column whose overlap duty
             cycle falls below this computed value will  get
             all of its permanence values boosted up by
             synPermActiveInc. Raising all permanences in response
             to a sub-par duty cycle before  inhibition allows a
             cell to search for new inputs when either its
             previously learned inputs are no longer ever active,
             or when the vast majority of them have been
             "hijacked" by other columns.
            
             @param minPctOverlapDutyCycle
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.getMinPctOverlapDutyCycles">
            see {@link #setMinPctOverlapDutyCycles(double)}
            @return
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.setMinPctActiveDutyCycles(System.Double)">
             A number between 0 and 1.0, used to set a floor on
             how often a column should be activate.
             Periodically, each column looks at the activity duty
             cycle of all other columns within its inhibition
             radius and sets its own internal minimal acceptable
             duty cycle to:
               minPctDutyCycleAfterInh *
               max(other columns' duty cycles).
             On each iteration, any column whose duty cycle after
             inhibition falls below this computed value will get
             its internal boost factor increased.
            
             @param minPctActiveDutyCycle
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.getMinPctActiveDutyCycles">
            Returns the minPctActiveDutyCycle
            see {@link #setMinPctActiveDutyCycles(double)}
            @return  the minPctActiveDutyCycle
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.setDutyCyclePeriod(System.Int32)">
             The period used to calculate duty cycles. Higher
             values make it take longer to respond to changes in
             boost or synPerConnectedCell. Shorter values make it
             more unstable and likely to oscillate.
            
             @param dutyCyclePeriod
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.getDutyCyclePeriod">
            Returns the configured duty cycle period
            see {@link #setDutyCyclePeriod(double)}
            @return  the configured duty cycle period
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.setMaxBoost(System.Double)">
             The maximum overlap boost factor. Each column's
             overlap gets multiplied by a boost factor
             before it gets considered for inhibition.
             The actual boost factor for a column is number
             between 1.0 and maxBoost. A boost factor of 1.0 is
             used if the duty cycle is &gt;= minOverlapDutyCycle,
             maxBoost is used if the duty cycle is 0, and any duty
             cycle in between is linearly extrapolated from these
             2 end points.
            
             @param maxBoost
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.getMaxBoost">
            Returns the max boost
            see {@link #setMaxBoost(double)}
            @return  the max boost
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.setWrapAround(System.Boolean)">
            Specifies whether neighborhoods wider than the 
            borders wrap around to the other side.
            @param b
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.isWrapAround">
            Returns a flag indicating whether neighborhoods
            wider than the borders, wrap around to the other
            side.
            @return
        </member>
        <member name="P:NeoCortexApi.Entities.Connections.BoostedOverlaps">
            Returns the boosted overlap score for each column
            @return the boosted overlaps
            Sets and Returns the boosted overlap score for each column
            @param boostedOverlaps
            @return
        </member>
        <member name="P:NeoCortexApi.Entities.Connections.Overlaps">
            <summary>
            Set/Get ovrlapps for each column.
            </summary>
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.setSynPermTrimThreshold(System.Double)">
            Sets the synPermTrimThreshold
            @param threshold
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.getSynPermTrimThreshold">
            Returns the synPermTrimThreshold
            @return
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.setPotentialPools(NeoCortexApi.Entities.IFlatMatrix{NeoCortexApi.Entities.Pool})">
             Sets the {@link FlatMatrix} which holds the mapping
             of column indexes to their lists of potential inputs.
            
             @param pools		{@link FlatMatrix} which holds the pools.
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.getPotentialPools">
            Returns the {@link FlatMatrix} which holds the mapping
            of column indexes to their lists of potential inputs.
            @return	the potential pools
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.getSynPermMin">
            Returns the minimum {@link Synapse} permanence.
            @return
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.getSynPermMax">
            Returns the maximum {@link Synapse} permanence.
            @return
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.getVersion">
            Returns the version number
            @return
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.getOverlapDutyCycles">
            Returns the overlap duty cycles.
            @return
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.setOverlapDutyCycles(System.Double[])">
            Sets the overlap duty cycles
            @param overlapDutyCycles
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.getActiveDutyCycles">
            Returns the dense (size=numColumns) array of duty cycle stats.
            @return	the dense array of active duty cycle values.
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.setActiveDutyCycles(System.Double[])">
            Sets the dense (size=numColumns) array of duty cycle stats.
            @param activeDutyCycles
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.updateActiveDutyCycles(System.Double[])">
             Applies the dense array values which aren't -1 to the array containing
             the active duty cycles of the column corresponding to the index specified.
             The length of the specified array must be as long as the configured number
             of columns of this {@code OldConnections}' column configuration.
            
             @param	denseActiveDutyCycles	a dense array containing values to set.
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.getMinOverlapDutyCycles">
            Returns the minOverlapDutyCycles.
            @return	the minOverlapDutyCycles.
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.setMinOverlapDutyCycles(System.Double[])">
            Sets the minOverlapDutyCycles
            @param minOverlapDutyCycles	the minOverlapDutyCycles
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.getMinActiveDutyCycles">
            Returns the minActiveDutyCycles
            @return	the minActiveDutyCycles
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.setMinActiveDutyCycles(System.Double[])">
            Sets the minActiveDutyCycles
            @param minActiveDutyCycles	the minActiveDutyCycles
        </member>
        <member name="P:NeoCortexApi.Entities.Connections.BoostFactors">
            Returns the array of boost factors
            @return	the array of boost factors
            Sets the array of boost factors
            @param boostFactors	the array of boost factors
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.computeActivity(System.Collections.Generic.ICollection{NeoCortexApi.Entities.Cell},System.Double)">
              //* Compute each segment's number of active synapses for a given input.
              //* In the returned lists, a segment's active synapse count is stored at index
              //* `segment.flatIdx`.
              //* 
              //* @param activePresynapticCells
              //* @param connectedPermanence
              //* @return
              //
            <summary>
            Compute each segment's number of active synapses for a given input.
            
            </summary>
            <param name="activePresynapticCells"></param>
            <param name="connectedPermanence"></param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.getLastActivity">
            Returns the last {@link Activity} computed during the most
            recently executed cycle.
            
            @return  the last activity to be computed.
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.recordSegmentActivity(NeoCortexApi.Entities.DistalDendrite)">
            Record the fact that a segment had some activity. This information is
            used during segment cleanup.
            
            @param segment		the segment for which to record activity
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.startNewIteration">
            Mark the passage of time. This information is used during segment
            cleanup.
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.createSegment(NeoCortexApi.Entities.Cell)">
            Adds a new {@link DistalDendrite} segment on the specified {@link Cell},
            or reuses an existing one.
            
            @param cell  the Cell to which a segment is added.
            @return  the newly created segment or a reused segment
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.destroySegment(NeoCortexApi.Entities.DistalDendrite)">
            Destroys a segment ({@link DistalDendrite})
            @param segment   the segment to destroy
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.leastRecentlyUsedSegment(NeoCortexApi.Entities.Cell)">
            Used internally to return the least recently activated segment on 
            the specified cell
            
            @param cell  cell to search for segments on
            @return  the least recently activated segment on 
                     the specified cell
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.numSegments">
            Returns the total number of {@link DistalDendrite}s
            
            @return  the total number of segments
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.numSegments(NeoCortexApi.Entities.Cell)">
            Returns the number of {@link DistalDendrite}s on a given {@link Cell}
            if specified, or the total number if the "optionalCellArg" is null.
            
            @param cell   an optional Cell to specify the context of the segment count.
            @return  either the total number of segments or the number on a specified cell.
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.getSegments(NeoCortexApi.Entities.Cell)">
             Returns the mapping of {@link Cell}s to their {@link DistalDendrite}s.
            
             @param cell      the {@link Cell} used as a key.
             @return          the mapping of {@link Cell}s to their {@link DistalDendrite}s.
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.getSegments(NeoCortexApi.Entities.Cell,System.Boolean)">
             Returns the mapping of {@link Cell}s to their {@link DistalDendrite}s.
            
             @param cell              the {@link Cell} used as a key.
             @param doLazyCreate      create a container for future use if true, if false
                                      return an orphaned empty set.
             @return          the mapping of {@link Cell}s to their {@link DistalDendrite}s.
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.GetSegmentForFlatIdx(System.Int32)">
            Get the segment with the specified flatIdx.
            @param index		The segment's flattened list index.
            @return	the {@link DistalDendrite} who's index matches.
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.columnIndexForSegment(NeoCortexApi.Entities.DistalDendrite)">
            Returns the index of the {@link Column} owning the cell which owns 
            the specified segment.
            @param segment   the {@link DistalDendrite} of the cell whose column index is desired.
            @return  the owning column's index
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.getSegmentMapping">
            <b>FOR TEST USE ONLY</b>
            @return
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.setActiveSegments(System.Collections.Generic.List{NeoCortexApi.Entities.DistalDendrite})">
            Set by the {@link TemporalMemory} following a compute cycle.
            @param l
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.getActiveSegments">
            Retrieved by the {@link TemporalMemorty} prior to a compute cycle.
            @return
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.setMatchingSegments(System.Collections.Generic.List{NeoCortexApi.Entities.DistalDendrite})">
            Set by the {@link TemporalMemory} following a compute cycle.
            @param l
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.getMatchingSegments">
            Retrieved by the {@link TemporalMemorty} prior to a compute cycle.
            @return
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.createSynapse(NeoCortexApi.Entities.DistalDendrite,NeoCortexApi.Entities.Cell,System.Double)">
            Creates a new synapse on a segment.
            
            @param segment               the {@link DistalDendrite} segment to which a {@link Synapse} is 
                                         being created
            @param presynapticCell       the source {@link Cell}
            @param permanence            the initial permanence
            @return  the created {@link Synapse}
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.destroySynapse(NeoCortexApi.Entities.Synapse)">
            Destroys the specified {@link Synapse}
            @param synapse   the Synapse to destroy
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.removeSynapseFromPresynapticMap(NeoCortexApi.Entities.Synapse)">
            Removes the specified {@link Synapse} from its
            pre-synaptic {@link Cell}'s map of synapses it 
            activates.
            
            @param synapse   the synapse to remove
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.minPermanenceSynapse(NeoCortexApi.Entities.DistalDendrite)">
            Used internally to find the synapse with the smallest permanence
            on the given segment.
            
            @param dd    Segment object to search for synapses on
            @return  Synapse object on the segment with the minimal permanence
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.GetNumSynapses">
            Returns the total number of {@link Synapse}s
            
            @return  either the total number of synapses
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.GetNumSynapses(NeoCortexApi.Entities.DistalDendrite)">
            Returns the number of {@link Synapse}s on a given {@link DistalDendrite}
            if specified, or the total number if the "optionalSegmentArg" is null.
            
            @param optionalSegmentArg    an optional Segment to specify the context of the synapse count.
            @return  either the total number of synapses or the number on a specified segment.
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.getReceptorSynapses(NeoCortexApi.Entities.Cell)">
             Returns the mapping of {@link Cell}s to their reverse mapped
             {@link Synapse}s.
            
             @param cell      the {@link Cell} used as a key.
             @return          the mapping of {@link Cell}s to their reverse mapped
                              {@link Synapse}s.
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.getReceptorSynapses(NeoCortexApi.Entities.Cell,System.Boolean)">
             Returns the mapping of {@link Cell}s to their reverse mapped
             {@link Synapse}s.
            
             @param cell              the {@link Cell} used as a key.
             @param doLazyCreate      create a container for future use if true, if false
                                      return an orphaned empty set.
             @return          the mapping of {@link Cell}s to their reverse mapped
                              {@link Synapse}s.
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.getSynapses(NeoCortexApi.Entities.DistalDendrite)">
            <summary>
            Returns synapeses of specified dentrite segment.
            </summary>
            <param name="segment">Distal Dentrite segment.</param>
            <returns>List of segment synapeses.</returns>
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.getSynapses(NeoCortexApi.Entities.ProximalDendrite)">
             Returns the mapping of {@link ProximalDendrite}s to their {@link Synapse}s.
            
             @param segment   the {@link ProximalDendrite} used as a key.
             @return          the mapping of {@link ProximalDendrite}s to their {@link Synapse}s.
        </member>
        <!-- Badly formed XML comment ignored for member "M:NeoCortexApi.Entities.Connections.getReceptorSynapseMapping" -->
        <member name="M:NeoCortexApi.Entities.Connections.clear">
            Clears all {@link TemporalMemory} state.
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.getActiveCells">
             Returns the current {@link Set} of active {@link Cell}s
            
             @return  the current {@link Set} of active {@link Cell}s
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.setActiveCells(System.Collections.Generic.ISet{NeoCortexApi.Entities.Cell})">
            Sets the current {@link Set} of active {@link Cell}s
            @param cells
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.getWinnerCells">
             Returns the current {@link Set} of winner cells
            
             @return  the current {@link Set} of winner cells
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.setWinnerCells(System.Collections.Generic.ISet{NeoCortexApi.Entities.Cell})">
            Sets the current {@link Set} of winner {@link Cell}s
            @param cells
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.getPredictiveCells">
            Returns the {@link Set} of predictive cells.
            @return
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.clearPredictiveCells">
            Clears the previous predictive cells from the list.
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.getColumn(System.Int32)">
            Returns the column at the specified index.
            @param index
            @return
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.setColumnDimensions(System.Int32[])">
             Sets the number of {@link Column}.
            
             @param columnDimensions
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.getColumnDimensions">
             Gets the number of {@link Column}.
            
             @return columnDimensions
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.setInputDimensions(System.Int32[])">
             A list representing the dimensions of the input
             vector. Format is [height, width, depth, ...], where
             each value represents the size of the dimension. For a
             topology of one dimension with 100 inputs use 100, or
             [100]. For a two dimensional topology of 10x5 use
             [10,5].
            
             @param inputDimensions
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.getInputDimensions">
            Returns the configured input dimensions
            see {@link #setInputDimensions(int[])}
            @return the configured input dimensions
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.setCellsPerColumn(System.Int32)">
            Sets the number of {@link Cell}s per {@link Column}
            @param cellsPerColumn
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.getCellsPerColumn">
             Gets the number of {@link Cell}s per {@link Column}.
            
             @return cellsPerColumn
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.setActivationThreshold(System.Int32)">
             Sets the activation threshold.
            
             If the number of active connected synapses on a segment
             is at least this threshold, the segment is said to be active.
            
             @param activationThreshold
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.getActivationThreshold">
            Returns the activation threshold.
            @return
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.setLearningRadius(System.Int32)">
             Radius around cell from which it can
             sample to form distal dendrite connections.
            
             @param   learningRadius
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.getLearningRadius">
            Returns the learning radius.
            @return
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.setMinThreshold(System.Int32)">
             If the number of synapses active on a segment is at least this
             threshold, it is selected as the best matching
             cell in a bursting column.
            
             @param   minThreshold
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.getMinThreshold">
            Returns the minimum threshold of active synapses to be picked as best.
            @return
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.setMaxNewSynapseCount(System.Int32)">
             The maximum number of synapses added to a segment during learning.
            
             @param   maxNewSynapseCount
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.getMaxNewSynapseCount">
             Returns the maximum number of synapses added to a segment during
             learning.
            
             @return
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.setMaxSegmentsPerCell(System.Int32)">
            The maximum number of segments allowed on a given cell
            @param maxSegmentsPerCell
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.getMaxSegmentsPerCell">
            Returns the maximum number of segments allowed on a given cell
            @return
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.setMaxSynapsesPerSegment(System.Int32)">
            The maximum number of synapses allowed on a given segment
            @param maxSynapsesPerSegment
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.getMaxSynapsesPerSegment">
            Returns the maximum number of synapses allowed per segment
            @return
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.setInitialPermanence(System.Double)">
             Initial permanence of a new synapse
            
             @param   initialPermanence
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.getInitialPermanence">
            Returns the initial permanence setting.
            @return
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.setConnectedPermanence(System.Double)">
             If the permanence value for a synapse
             is greater than this value, it is said
             to be connected.
            
             @param connectedPermanence
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.getConnectedPermanence">
             If the permanence value for a synapse
             is greater than this value, it is said
             to be connected.
            
             @return
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.setPermanenceIncrement(System.Double)">
             Amount by which permanences of synapses
             are incremented during learning.
            
             @param   permanenceIncrement
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.getPermanenceIncrement">
            Amount by which permanences of synapses
            are incremented during learning.
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.setPermanenceDecrement(System.Double)">
             Amount by which permanences of synapses
             are decremented during learning.
            
             @param   permanenceDecrement
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.getPermanenceDecrement">
            Amount by which permanences of synapses
            are decremented during learning.
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.setPredictedSegmentDecrement(System.Double)">
            Amount by which active permanences of synapses of previously predicted but inactive segments are decremented.
            @param predictedSegmentDecrement
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.getPredictedSegmentDecrement">
            Returns the predictedSegmentDecrement amount.
            @return
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.asCellIndexes(System.Collections.ObjectModel.Collection{NeoCortexApi.Entities.Cell})">
             Converts a {@link Collection} of {@link Cell}s to a list
             of cell indexes.
            
             @param cells
             @return
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.asColumnIndexes(System.Collections.ObjectModel.Collection{NeoCortexApi.Entities.Column})">
             Converts a {@link Collection} of {@link Column}s to a list
             of column indexes.
            
             @param columns
             @return
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.asCellObjects(System.Collections.ObjectModel.Collection{NeoCortexApi.Entities.Integer})">
            Returns a list of the {@link Cell}s specified.
            @param cells		the indexes of the {@link Cell}s to return
            @return	the specified list of cells
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.asColumnObjects(System.Collections.ObjectModel.Collection{NeoCortexApi.Entities.Integer})">
            Returns a list of the {@link Column}s specified.
            @param cols		the indexes of the {@link Column}s to return
            @return		the specified list of columns
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.getColumnSet(System.Int32[])">
             Returns a {@link Set} view of the {@link Column}s specified by
             the indexes passed in.
            
             @param indexes		the indexes of the Columns to return
             @return				a set view of the specified columns
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.getColumnList(System.Int32[])">
             Returns a {@link List} view of the {@link Column}s specified by
             the indexes passed in.
            
             @param indexes		the indexes of the Columns to return
             @return				a List view of the specified columns
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.printParameters">
            High verbose output useful for debugging
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.getConnecteds">
            Returns a 2 Dimensional array of 1's and 0's indicating
            which of the column's pool members are above the connected
            threshold, and therefore considered "connected"
            @return
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.getPotentials">
            Returns a 2 Dimensional array of 1's and 0's indicating
            which input bits belong to which column's pool.
            @return
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.getPermanences">
            Returns a 2 Dimensional array of the permanences for SP
            proximal dendrite column pooled connections.
            @return
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.GetHashCode">
            {@inheritDoc}
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.Equals(System.Object)">
            {@inheritDoc}
        </member>
        <member name="T:NeoCortexApi.Entities.DistalDendrite">
            Represents a proximal or distal dendritic segment. Segments are owned by
            {@link Cell}s and in turn own {@link Synapse}s which are obversely connected
            to by a "source cell", which is the {@link Cell} which will activate a given
            {@link Synapse} owned by this {@code Segment}.
            
            @author Chetan Surpur
            @author David Ray
        </member>
        <member name="F:NeoCortexApi.Entities.DistalDendrite.serialVersionUID">
            keep it simple 
        </member>
        <member name="M:NeoCortexApi.Entities.DistalDendrite.#ctor(NeoCortexApi.Entities.Cell,System.Int32,System.Int64,System.Int32)">
            Constructs a new {@code Segment} object with the specified owner
            {@link Cell} and the specified index.
            
            @param cell      the owner
            @param flatIdx     this {@code Segment}'s index.
        </member>
        <member name="M:NeoCortexApi.Entities.DistalDendrite.getParentCell">
            Returns the owner {@link Cell}
            
            @return
        </member>
        <member name="M:NeoCortexApi.Entities.DistalDendrite.getAllSynapses(NeoCortexApi.Entities.Connections)">
            <summary>
            Gets all synapses owned by this distal dentrite segment.
            </summary>
            <param name="c"></param>
            <returns>Synapses.</returns>
        </member>
        <member name="M:NeoCortexApi.Entities.DistalDendrite.getActiveSynapses(NeoCortexApi.Entities.Connections,System.Collections.Generic.ISet{NeoCortexApi.Entities.Cell})">
            <summary>
            Gets all active synapses of this segment, which have presynaptic cell as active one.
            </summary>
            <param name="c"></param>
            <param name="activeCells"></param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Entities.DistalDendrite.setLastUsedIteration(System.Int64)">
            Sets the last iteration in which this segment was active.
            @param iteration
        </member>
        <member name="M:NeoCortexApi.Entities.DistalDendrite.getLastUsedIteration">
            Returns the iteration in which this segment was last active.
            @return  the iteration in which this segment was last active.
        </member>
        <member name="M:NeoCortexApi.Entities.DistalDendrite.getOrdinal">
            Returns this {@code DistalDendrite} segment's ordinal
            @return	this segment's ordinal
        </member>
        <member name="M:NeoCortexApi.Entities.DistalDendrite.setOrdinal(System.Int32)">
            Sets the ordinal value (used for age determination) on this segment.
            @param ordinal	the age or order of this segment
        </member>
        <member name="M:NeoCortexApi.Entities.DistalDendrite.CompareTo(NeoCortexApi.Entities.DistalDendrite)">
            <summary>
            Compares by index.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:NeoCortexApi.Entities.IFlatMatrix`1" -->
        <member name="M:NeoCortexApi.Entities.IFlatMatrix`1.getMaxIndex">
            Returns the maximum accessible flat index.
            @return  the maximum accessible flat index.
        </member>
        <member name="M:NeoCortexApi.Entities.IFlatMatrix`1.computeCoordinates(System.Int32)">
            Returns an integer array representing the coordinates of the specified index
            in terms of the configuration of this {@code SparseMatrix}.
            @param index the flat index to be returned as coordinates
            @return  coordinates
        </member>
        <!-- Badly formed XML comment ignored for member "T:NeoCortexApi.Entities.IMatrix`1" -->
        <member name="M:NeoCortexApi.Entities.IMatrix`1.getDimensions">
            Returns the array describing the dimensionality of the configured array.
            @return  the array describing the dimensionality of the configured array.
        </member>
        <member name="M:NeoCortexApi.Entities.IMatrix`1.getNumDimensions">
            Returns the configured number of dimensions.
            @return  the configured number of dimensions.
        </member>
        <member name="M:NeoCortexApi.Entities.IMatrix`1.get(System.Int32[])">
            Gets element at supplied index.
            @param index index to retrieve.
            @return element at index.
        </member>
        <member name="M:NeoCortexApi.Entities.IMatrix`1.set(System.Int32[],`0)">
            Puts an element to supplied index.
            @param index index to put on.
            @param value value element.
        </member>
        <member name="M:NeoCortexApi.Entities.ISparseMatrix`1.getSparseIndices">
            Returns a sorted array of occupied indexes.
            @return  a sorted array of occupied indexes.
        </member>
        <member name="M:NeoCortexApi.Entities.ISparseMatrix`1.get1DIndexes">
            Returns an array of all the flat indexes that can be 
            computed from the current configuration.
            @return
        </member>
        <member name="M:NeoCortexApi.Entities.ISparseMatrix`1.asDense(NeoCortexApi.ITypeFactory{`0})">
            Uses the specified {@link TypeFactory} to return an array
            filled with the specified object type, according this {@code SparseMatrix}'s 
            configured dimensions
            
            @param factory   a factory to make a specific type
            @return  the dense array
        </member>
        <member name="F:NeoCortexApi.Entities.KEY.COLUMN_DIMENSIONS">
            Total number of columns
        </member>
        <member name="F:NeoCortexApi.Entities.KEY.CELLS_PER_COLUMN">
            Total number of cells per column
        </member>
        <member name="F:NeoCortexApi.Entities.KEY.LEARN">
            Learning variable
        </member>
        <member name="F:NeoCortexApi.Entities.KEY.RANDOM">
            Random Number Generator
        </member>
        <member name="F:NeoCortexApi.Entities.KEY.SEED">
            Seed for random number generator
        </member>
        <member name="F:NeoCortexApi.Entities.KEY.ACTIVATION_THRESHOLD">
            If the number of active connected synapses on a segment
            is at least this threshold, the segment is said to be active.
        </member>
        <member name="F:NeoCortexApi.Entities.KEY.LEARNING_RADIUS">
            Radius around cell from which it can
            sample to form distal {@link DistalDendrite} connections.
        </member>
        <member name="F:NeoCortexApi.Entities.KEY.MIN_THRESHOLD">
            If the number of synapses active on a segment is at least this
            threshold, it is selected as the best matching
            cell in a bursting column.
        </member>
        <member name="F:NeoCortexApi.Entities.KEY.MAX_NEW_SYNAPSE_COUNT">
            The maximum number of synapses added to a segment during learning.
        </member>
        <member name="F:NeoCortexApi.Entities.KEY.MAX_SYNAPSES_PER_SEGMENT">
            The maximum number of synapses that can be added to a segment.
        </member>
        <member name="F:NeoCortexApi.Entities.KEY.MAX_SEGMENTS_PER_CELL">
            The maximum number of {@link Segment}s a {@link Cell} can have.
        </member>
        <member name="F:NeoCortexApi.Entities.KEY.INITIAL_PERMANENCE">
            Initial permanence of a new synapse
        </member>
        <member name="F:NeoCortexApi.Entities.KEY.CONNECTED_PERMANENCE">
            If the permanence value for a synapse
            is greater than this value, it is said
            to be connected.
        </member>
        <member name="F:NeoCortexApi.Entities.KEY.PERMANENCE_INCREMENT">
            Amount by which permanence of synapses
            are incremented during learning.
        </member>
        <member name="F:NeoCortexApi.Entities.KEY.PERMANENCE_DECREMENT">
            Amount by which permanences of synapses
            are decremented during learning.
        </member>
        <member name="F:NeoCortexApi.Entities.KEY.PREDICTED_SEGMENT_DECREMENT">
            Amount by which active permanences of synapses of previously 
            predicted but inactive segments are decremented.
        </member>
        <member name="F:NeoCortexApi.Entities.KEY.INPUT_DIMENSIONS">
            TODO: Remove this and add Logging (slf4j) 
        </member>
        <member name="F:NeoCortexApi.Entities.KEY.POTENTIAL_RADIUS">
            <b>WARNING:</b> potentialRadius **must** be set to 
            the inputWidth if using "globalInhibition" and if not 
            using the Network API (which sets this automatically) 
        </member>
        <member name="F:NeoCortexApi.Entities.KEY.POTENTIAL_PCT">
            The percent of the inputs, within a column's potential radius, that a
            column can be connected to.  If set to 1, the column will be connected
            to every input within its potential radius. This parameter is used to
            give each column a unique potential pool when a large potentialRadius
            causes overlap between the columns. At initialization time we choose
            ((2*potentialRadius + 1)^(# inputDimensions) * potentialPct) input bits
            to comprise the column's potential pool.
        </member>
        <member name="F:NeoCortexApi.Entities.KEY.GLOBAL_INHIBITION">
            If true, then during inhibition phase the winning columns are selected
            as the most active columns from the region as a whole. Otherwise, the
            winning columns are selected with respect to their local neighborhoods.
            Using global inhibition boosts performance x60.
        </member>
        <member name="F:NeoCortexApi.Entities.KEY.INHIBITION_RADIUS">
            The inhibition radius determines the size of a column's local
            neighborhood.  A cortical column must overcome the overlap score of
            columns in its neighborhood in order to become active. This radius is
            updated every learning round. It grows and shrinks with the average
            number of connected synapses per column.
        </member>
        <member name="F:NeoCortexApi.Entities.KEY.LOCAL_AREA_DENSITY">
            The desired density of active columns within a local inhibition area
            (the size of which is set by the internally calculated inhibitionRadius,
            which is in turn determined from the average size of the connected
            potential pools of all columns). The inhibition logic will insure that
            at most N columns remain ON within a local inhibition area, where
            N = localAreaDensity * (total number of columns in inhibition area).
        </member>
        <member name="F:NeoCortexApi.Entities.KEY.NUM_ACTIVE_COLUMNS_PER_INH_AREA">
            An alternate way to control the density of the active columns. If
            numActiveColumnsPerInhArea is specified then localAreaDensity must be
            less than 0, and vice versa.  When using numActiveColumnsPerInhArea, the
            inhibition logic will insure that at most 'numActiveColumnsPerInhArea'
            columns remain ON within a local inhibition area (the size of which is
            set by the internally calculated inhibitionRadius, which is in turn
            determined from the average size of the connected receptive fields of all
            columns). When using this method, as columns learn and grow their
            effective receptive fields, the inhibitionRadius will grow, and hence the
            net density of the active columns will *decrease*. This is in contrast to
            the localAreaDensity method, which keeps the density of active columns
            the same regardless of the size of their receptive fields.
        </member>
        <member name="F:NeoCortexApi.Entities.KEY.STIMULUS_THRESHOLD">
            This is a number specifying the minimum number of synapses that must be
            on in order for a columns to turn ON. The purpose of this is to prevent
            noise input from activating columns. Specified as a percent of a fully
            grown synapse.
        </member>
        <member name="F:NeoCortexApi.Entities.KEY.SYN_PERM_INACTIVE_DEC">
            The amount by which an inactive synapse is decremented in each round.
            Specified as a percent of a fully grown synapse.
        </member>
        <member name="F:NeoCortexApi.Entities.KEY.SYN_PERM_ACTIVE_INC">
            The amount by which an active synapse is incremented in each round.
            Specified as a percent of a fully grown synapse.
        </member>
        <member name="F:NeoCortexApi.Entities.KEY.SYN_PERM_CONNECTED">
            The default connected threshold. Any synapse whose permanence value is
            above the connected threshold is a "connected synapse", meaning it can
            contribute to the cell's firing.
        </member>
        <!-- Badly formed XML comment ignored for member "F:NeoCortexApi.Entities.KEY.SYN_PERM_BELOW_STIMULUS_INC" -->
        <!-- Badly formed XML comment ignored for member "F:NeoCortexApi.Entities.KEY.SYN_PERM_TRIM_THRESHOLD" -->
        <member name="F:NeoCortexApi.Entities.KEY.MIN_PCT_OVERLAP_DUTY_CYCLES">
            A number between 0 and 1.0, used to set a floor on how often a column
            should have at least stimulusThreshold active inputs. Periodically, each
            column looks at the overlap duty cycle of all other columns within its
            inhibition radius and sets its own internal minimal acceptable duty cycle
            to: minPctDutyCycleBeforeInh * max(other columns' duty cycles).  On each
            iteration, any column whose overlap duty cycle falls below this computed
            value will  get all of its permanence values boosted up by
            synPermActiveInc. Raising all permanences in response to a sub-par duty
            cycle before  inhibition allows a cell to search for new inputs when
            either its previously learned inputs are no longer ever active, or when
            the vast majority of them have been "hijacked" by other columns.
        </member>
        <member name="F:NeoCortexApi.Entities.KEY.MIN_PCT_ACTIVE_DUTY_CYCLES">
            A number between 0 and 1.0, used to set a floor on how often a column
            should be activate.  Periodically, each column looks at the activity duty
            cycle of all other columns within its inhibition radius and sets its own
            internal minimal acceptable duty cycle to: minPctDutyCycleAfterInh *
            max(other columns' duty cycles).  On each iteration, any column whose duty
            cycle after inhibition falls below this computed value will get its
            internal boost factor increased.
        </member>
        <member name="F:NeoCortexApi.Entities.KEY.DUTY_CYCLE_PERIOD">
            The period used to calculate duty cycles. Higher values make it take
            longer to respond to changes in boost or synPerConnectedCell. Shorter
            values make it more unstable and likely to oscillate.
        </member>
        <member name="F:NeoCortexApi.Entities.KEY.MAX_BOOST">
            The maximum overlap boost factor. Each column's overlap gets multiplied
            by a boost factor before it gets considered for inhibition.  The actual
            boost factor for a column is number between 1.0 and maxBoost. A boost
            factor of 1.0 is used if the duty cycle is >= minOverlapDutyCycle,
            maxBoost is used if the duty cycle is 0, and any duty cycle in between is
            linearly extrapolated from these 2 endpoints.
        </member>
        <member name="F:NeoCortexApi.Entities.KEY.WRAP_AROUND">
            Determines if inputs at the beginning and end of an input dimension should
            be considered neighbors when mapping columns to inputs.
        </member>
        <member name="F:NeoCortexApi.Entities.KEY.SP_PRIMER_DELAY">
            Number of cycles to send through the SP before forwarding data to the rest of the network. 
        </member>
        <member name="F:NeoCortexApi.Entities.KEY.N">
            number of bits in the representation (must be &gt;= w) 
        </member>
        <member name="F:NeoCortexApi.Entities.KEY.W">
            The number of bits that are set to encode a single value - the
            "width" of the output signal
        </member>
        <member name="F:NeoCortexApi.Entities.KEY.MIN_VAL">
            The minimum value of the input signal.  
        </member>
        <member name="F:NeoCortexApi.Entities.KEY.MAX_VAL">
            The maximum value of the input signal. 
        </member>
        <member name="F:NeoCortexApi.Entities.KEY.RADIUS">
            inputs separated by more than, or equal to this distance will have non-overlapping
            representations
        </member>
        <member name="F:NeoCortexApi.Entities.KEY.RESOLUTION">
            inputs separated by more than, or equal to this distance will have different representations 
        </member>
        <member name="F:NeoCortexApi.Entities.KEY.PERIODIC">
            If true, then the input value "wraps around" such that minval = maxval
            For a periodic value, the input must be strictly less than maxval,
            otherwise maxval is a true upper bound.
        </member>
        <member name="F:NeoCortexApi.Entities.KEY.CLIP_INPUT">
            if true, non-periodic inputs smaller than minval or greater
            than maxval will be clipped to minval/maxval 
        </member>
        <member name="F:NeoCortexApi.Entities.KEY.FORCED">
            If true, skip some safety checks (for compatibility reasons), default false 
            Mostly having to do with being able to set the window size &lt; 21 
        </member>
        <member name="F:NeoCortexApi.Entities.KEY.FIELD_NAME">
            Name of the field being encoded 
        </member>
        <member name="F:NeoCortexApi.Entities.KEY.FIELD_TYPE">
            Primitive type of the field, used to auto-configure the type of encoder 
        </member>
        <member name="F:NeoCortexApi.Entities.KEY.ENCODER">
            Encoder name 
        </member>
        <member name="F:NeoCortexApi.Entities.KEY.FIELD_ENCODING_MAP">
            Designates holder for the Multi Encoding Map 
        </member>
        <member name="F:NeoCortexApi.Entities.KEY.INFERRED_FIELDS">
            Maps encoder input field name to type of classifier to be used for them 
        </member>
        <member name="M:NeoCortexApi.Entities.Pair`2.#ctor">
            <summary>
            Creates an empty key-pair.
            </summary>
        </member>
        <member name="M:NeoCortexApi.Entities.Parameters.size">
            Returns the size of the internal parameter storage.
            @return
        </member>
        <member name="M:NeoCortexApi.Entities.Parameters.getAllDefaultParameters">
             Factory method. Return global {@link Parameters} object with default values
            
             @return {@link Parameters} object
        </member>
        <member name="M:NeoCortexApi.Entities.Parameters.getTemporalDefaultParameters">
             Factory method. Return temporal {@link Parameters} object with default values
            
             @return {@link Parameters} object
        </member>
        <member name="M:NeoCortexApi.Entities.Parameters.getSpatialDefaultParameters">
             Factory method. Return spatial {@link Parameters} object with default values
            
             @return {@link Parameters} object
        </member>
        <member name="M:NeoCortexApi.Entities.Parameters.getEncoderDefaultParameters">
            Factory method. Return Encoder {@link Parameters} object with default values
            @return
        </member>
        <member name="M:NeoCortexApi.Entities.Parameters.getParameters(System.Collections.Generic.Dictionary{System.String,System.Object})">
             Called internally to populate a {@link Parameters} object with the keys
             and values specified in the passed in map.
            
             @return {@link Parameters} object
        </member>
        <member name="M:NeoCortexApi.Entities.Parameters.apply(System.Object)">
             Sets the fields specified by this {@code Parameters} on the specified
             {@link Connections} object.
            
             @param cn
        </member>
        <member name="M:NeoCortexApi.Entities.Parameters.setRandom(System.Random)">
             Returns the seeded random number generator.
            
             @param r the generator to use.
        </member>
        <member name="M:NeoCortexApi.Entities.Parameters.setColumnDimensions(System.Int32[])">
             Sets the number of {@link Column}.
            
             @param columnDimensions
        </member>
        <member name="M:NeoCortexApi.Entities.Parameters.setCellsPerColumn(System.Int32)">
            **
        </member>
        <member name="M:NeoCortexApi.Entities.Parameters.setActivationThreshold(System.Int32)">
            **
        </member>
        <member name="M:NeoCortexApi.Entities.Parameters.setLearningRadius(System.Int32)">
            **
        </member>
        <member name="M:NeoCortexApi.Entities.Parameters.setMinThreshold(System.Int32)">
            **
        </member>
        <member name="M:NeoCortexApi.Entities.Parameters.setMaxSynapsesPerSegment(System.Int32)">
            **
        </member>
        <member name="M:NeoCortexApi.Entities.Parameters.setMaxSegmentsPerCell(System.Int32)">
            **
        </member>
        <member name="M:NeoCortexApi.Entities.Parameters.setMaxNewSynapseCount(System.Int32)">
            **
        </member>
        <member name="M:NeoCortexApi.Entities.Parameters.setSeed(System.Int32)">
            **
        </member>
        <member name="M:NeoCortexApi.Entities.Parameters.setInitialPermanence(System.Double)">
            **
        </member>
        <member name="M:NeoCortexApi.Entities.Parameters.setConnectedPermanence(System.Double)">
            **
        </member>
        <member name="M:NeoCortexApi.Entities.Parameters.setPermanenceIncrement(System.Double)">
            **
        </member>
        <member name="M:NeoCortexApi.Entities.Parameters.setPermanenceDecrement(System.Double)">
            **
        </member>
        <member name="M:NeoCortexApi.Entities.Parameters.setInputDimensions(System.Int32[])">
             A list representing the dimensions of the input
             vector. Format is [height, width, depth, ...], where
             each value represents the size of the dimension. For a
             topology of one dimension with 100 inputs use 100, or
             [100]. For a two dimensional topology of 10x5 use
             [10,5].
            
             @param inputDimensions
        </member>
        <member name="M:NeoCortexApi.Entities.Parameters.setPotentialRadius(System.Int32)">
            **
        </member>
        <member name="M:NeoCortexApi.Entities.Parameters.setInhibitionRadius(System.Int32)">
            **
        </member>
        <member name="M:NeoCortexApi.Entities.Parameters.setPotentialPct(System.Double)">
            **
        </member>
        <member name="M:NeoCortexApi.Entities.Parameters.setGlobalInhibition(System.Boolean)">
            **
        </member>
        <member name="M:NeoCortexApi.Entities.Parameters.setLocalAreaDensity(System.Double)">
            **
        </member>
        <member name="M:NeoCortexApi.Entities.Parameters.setNumActiveColumnsPerInhArea(System.Double)">
            **
        </member>
        <member name="M:NeoCortexApi.Entities.Parameters.setStimulusThreshold(System.Double)">
            **
        </member>
        <member name="M:NeoCortexApi.Entities.Parameters.setSynPermInactiveDec(System.Double)">
            **
        </member>
        <member name="M:NeoCortexApi.Entities.Parameters.setSynPermActiveInc(System.Double)">
            **
        </member>
        <member name="M:NeoCortexApi.Entities.Parameters.setSynPermConnected(System.Double)">
            **
        </member>
        <member name="M:NeoCortexApi.Entities.Parameters.setSynPermBelowStimulusInc(System.Double)">
            **
        </member>
        <member name="M:NeoCortexApi.Entities.Parameters.setSynPermTrimThreshold(System.Double)">
            **
        </member>
        <member name="M:NeoCortexApi.Entities.Parameters.setMinPctOverlapDutyCycles(System.Double)">
            **
        </member>
        <member name="M:NeoCortexApi.Entities.Parameters.setMinPctActiveDutyCycles(System.Double)">
            **
        </member>
        <member name="M:NeoCortexApi.Entities.Parameters.setDutyCyclePeriod(System.Int32)">
            **
        </member>
        <member name="M:NeoCortexApi.Entities.Parameters.setMaxBoost(System.Double)">
            **
        </member>
        <member name="M:NeoCortexApi.Entities.Parameters.ToString">
            {@inheritDoc}
        </member>
        <member name="M:NeoCortexApi.Entities.Parameters.GetHashCode">
            Usage of {@link DeepEquals} in order to ensure the same hashcode
            for the same equal content regardless of cycles.
        </member>
        <member name="T:NeoCortexApi.Entities.Pool">
            Convenience container for "bound" {@link Synapse} values
            which can be dereferenced from both a Synapse and the 
            {@link Connections} object. All Synapses will have a reference
            to a {@code Pool} to retrieve relevant values. In addition, that
            same pool can be referenced from the Connections object externally
            which will update the Synapse's internal reference.
            
            @author David Ray
            @see Synapse
            @see Connections
        </member>
        <member name="F:NeoCortexApi.Entities.Pool.synapseConnections">
            Allows fast removal of connected synapse indexes. List of connected synapses. These
                     are synapses with permanence value greather than permanence connected threshold. See synPermConnected
            
        </member>
        <member name="F:NeoCortexApi.Entities.Pool.synapsesBySourceIndex">
            Indexed according to the source Input Vector Bit (for ProximalDendrites),
            and source cell (for DistalDendrites).
        </member>
        <member name="M:NeoCortexApi.Entities.Pool.getPermanence(NeoCortexApi.Entities.Synapse)">
            Returns the permanence value for the {@link Synapse} specified.
            
            @param s	the Synapse
            @return	the permanence
        </member>
        <member name="M:NeoCortexApi.Entities.Pool.setPermanence(NeoCortexApi.Entities.Connections,NeoCortexApi.Entities.Synapse,System.Double)">
            Sets the specified  permanence value for the specified {@link Synapse}
            @param s
            @param permanence
        </member>
        <member name="M:NeoCortexApi.Entities.Pool.updatePool(NeoCortexApi.Entities.Connections,NeoCortexApi.Entities.Synapse,System.Double)">
            Updates this {@code Pool}'s store of permanences for the specified {@link Synapse}
            @param c				the connections memory
            @param s				the synapse who's permanence is recorded
            @param permanence	the permanence value to record
        </member>
        <member name="M:NeoCortexApi.Entities.Pool.resetConnections">
            Resets the current connections in preparation for new permanence
            adjustments.
        </member>
        <member name="M:NeoCortexApi.Entities.Pool.getSynapseWithInput(System.Int32)">
            Returns the {@link Synapse} connected to the specified input bit
            index.
            
            @param inputIndex	the input vector connection's index.
            @return
        </member>
        <member name="M:NeoCortexApi.Entities.Pool.getSparsePermanences">
            Returns an array of permanence values
            @return
        </member>
        <member name="M:NeoCortexApi.Entities.Pool.getDensePermanences(NeoCortexApi.Entities.Connections)">
            Returns a dense array representing the potential pool permanences
            
            Note: Only called from tests for now...
            @param c
            @return
        </member>
        <member name="M:NeoCortexApi.Entities.Pool.getSparsePotential">
            Returns an array of input bit indexes indicating the index of the source. 
            (input vector bit or lateral cell)
            @return the sparse array
        </member>
        <member name="M:NeoCortexApi.Entities.Pool.getDensePotential(NeoCortexApi.Entities.Connections)">
            Returns a dense binary array containing 1's where the input bits are part
            of this pool.
            @param c     the {@link Connections}
            @return  dense binary array of member inputs
        </member>
        <member name="M:NeoCortexApi.Entities.Pool.getDenseConnected(NeoCortexApi.Entities.Connections)">
            Returns an binary array whose length is equal to the number of inputs;
            and where 1's are set in the indexes of this pool's assigned bits.
            
            @param   c   {@link Connections}
            @return the sparse array
        </member>
        <member name="M:NeoCortexApi.Entities.Pool.destroySynapse(NeoCortexApi.Entities.Synapse)">
            Destroys any references this {@code Pool} maintains on behalf
            of the specified {@link Synapse}
            
            @param synapse
        </member>
        <member name="M:NeoCortexApi.Entities.Pool.destroy">
            Clears the state of this {@code Pool}
        </member>
        <member name="T:NeoCortexApi.Entities.ProximalDendrite">
            <summary>
            Defines th eproximal dentritte segment.
            </summary>
        </member>
        <member name="F:NeoCortexApi.Entities.ProximalDendrite.serialVersionUID">
            keep it simple 
        </member>
        <member name="M:NeoCortexApi.Entities.ProximalDendrite.#ctor(System.Int32)">
            
            @param index     this {@code ProximalDendrite}'s index.
        </member>
        <member name="M:NeoCortexApi.Entities.ProximalDendrite.createPool(NeoCortexApi.Entities.Connections,System.Int32[])">
            Creates the pool of {@link Synapse}s representing the connection
            to the input vector.
            
            @param c					the {@link Connections} memory
            @param inputIndexes		indexes specifying the input vector bit
        </member>
        <member name="M:NeoCortexApi.Entities.ProximalDendrite.setPermanences(NeoCortexApi.Entities.Connections,System.Double[])">
            Sets the permanences for each {@link Synapse}. The number of synapses
            is set by the potentialPct variable which determines the number of input
            bits a given column will be "attached" to which is the same number as the
            number of {@link Synapse}s
            
            @param c			the {@link Connections} memory
            @param perms		the floating point degree of connectedness
        </member>
        <member name="M:NeoCortexApi.Entities.ProximalDendrite.setPermanences(NeoCortexApi.Entities.Connections,System.Double[],System.Int32[])">
            Sets the permanences for each {@link Synapse} specified by the indexes
            passed in which identify the input vector indexes associated with the
            {@code Synapse}. The permanences passed in are understood to be in "sparse"
            format and therefore require the int array identify their corresponding
            indexes.
            
            Note: This is the "sparse" version of this method.
            
            @param c			the {@link Connections} memory
            @param perms		the floating point degree of connectedness
        </member>
        <member name="M:NeoCortexApi.Entities.ProximalDendrite.setConnectedSynapsesForTest(NeoCortexApi.Entities.Connections,System.Int32[])">
            Sets the input vector synapse indexes which are connected (&gt;= synPermConnected)
            @param c
            @param connectedIndexes
        </member>
        <member name="M:NeoCortexApi.Entities.ProximalDendrite.getConnectedSynapsesDense(NeoCortexApi.Entities.Connections)">
            Returns an array of synapse indexes as a dense binary array.
            @param c
            @return
        </member>
        <member name="M:NeoCortexApi.Entities.ProximalDendrite.getConnectedSynapsesSparse(NeoCortexApi.Entities.Connections)">
            Returns an sparse array of synapse indexes representing the connected bits.
            @param c
            @return
        </member>
        <member name="T:NeoCortexApi.Entities.Segment">
            <summary>
            Base class which handles the creation of <seealso cref="T:NeoCortexApi.Entities.Synapse"/> on behalf of inheriting class types.
            </summary>
        </member>
        <member name="M:NeoCortexApi.Entities.Segment.#ctor(System.Int32)">
            <summary>
            Creates the proximal dentrite segment with specified index.
            </summary>
            <param name="index">Index of segment.</param>
        </member>
        <member name="M:NeoCortexApi.Entities.Segment.getIndex">
            <summary>
            Returns the index of proximal dentrite.
            </summary>
            <seealso cref="T:NeoCortexApi.Entities.ProximalDendrite"/>
            <returns>Index</returns>
        </member>
        <member name="M:NeoCortexApi.Entities.Segment.createSynapse(NeoCortexApi.Entities.Connections,System.Collections.Generic.List{NeoCortexApi.Entities.Synapse},NeoCortexApi.Entities.Cell,NeoCortexApi.Entities.Pool,System.Int32,System.Int32)">
            <p>
            Creates and returns a newly created {@link Synapse} with the specified
            source cell, permanence, and index.
            </p><p>
            IMPORTANT: 	<b>This method is only called for Proximal Synapses.</b> For ProximalDendrites, 
            				there are many synapses within a pool, and in that case, the index 
            				specifies the synapse's sequence order within the pool object, and may 
            				be referenced by that index.
            </p>
            @param c             the connections state of the temporal memory
            @param sourceCell    the source cell which will activate the new {@code Synapse}
            @param pool		    the new {@link Synapse}'s pool for bound variables.
            @param index         the new {@link Synapse}'s index.
            @param inputIndex	the index of this {@link Synapse}'s input (source object); be it a Cell or InputVector bit.
            
            @return the newly created {@code Synapse}
            @see Connections#createSynapse(DistalDendrite, Cell, double)
            <summary>
            Creates and returns a newly created synapse with the specified
            source cell, permanence, and index.
            </summary>
            <param name="c">Memory instance.</param>
            <param name="synapses">List of synapses, where one has to be added.</param>
            <param name="sourceCell"></param>
            <param name="pool"></param>
            <param name="index">Sequence within gthe pool.</param>
            <param name="inputIndex"></param>
            <remarks>
            This method is only called for Proximal Synapses. For ProximalDendrites, 
            there are many synapses within a pool, and in that case, the index 
            specifies the synapse's sequence order within the pool object, and may be referenced by that index</remarks>
            <returns>Instance of the new synapse.</returns>
            <seealso cref="T:NeoCortexApi.Entities.Synapse"/>
        </member>
        <member name="M:NeoCortexApi.Entities.Segment.GetHashCode">
            <summary>
            Hashcode calculation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Entities.Segment.Equals(NeoCortexApi.Entities.Segment)">
            <summary>
            Compares two segments
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:NeoCortexApi.Entities.SegmentActivity">
            <summary>
            Used as tupple in temporal cycle calculus.
            </summary>
        </member>
        <member name="F:NeoCortexApi.Entities.SegmentActivity.Active">
            <summary>
            Contains the index of segments with number of synapses with permanence higher than threshold,
            which makes synapse active.
            [segment index, number of active synapses].
            </summary>
        </member>
        <member name="F:NeoCortexApi.Entities.SegmentActivity.Potential">
            <summary>
            Contains the index of segments with number of synapses with permanence higher than minimum threshold,
            which makes synapse potential one.
            Dictionary [segment index, number of potential synapses].
            </summary>
        </member>
        <member name="T:NeoCortexApi.Entities.SparseBinaryMatrix">
             Implementation of a sparse matrix which contains binary integer
             values only.
             
             @author cogmission
            
        </member>
        <member name="F:NeoCortexApi.Entities.SparseBinaryMatrix.serialVersionUID">
            keep it simple 
        </member>
        <member name="F:NeoCortexApi.Entities.SparseBinaryMatrix.backingArray">
            <summary>
            Holds the matrix with connections between columns and inputs.
            </summary>
        </member>
        <member name="M:NeoCortexApi.Entities.SparseBinaryMatrix.#ctor(System.Int32[])">
            Constructs a new {@code SparseBinaryMatrix} with the specified
            dimensions (defaults to row major ordering)
            
            @param dimensions    each indexed value is a dimension size
        </member>
        <member name="M:NeoCortexApi.Entities.SparseBinaryMatrix.#ctor(System.Int32[],System.Boolean)">
            Constructs a new {@code SparseBinaryMatrix} with the specified dimensions,
            allowing the specification of column major ordering if desired. 
            (defaults to row major ordering)
            
            @param dimensions                each indexed value is a dimension size
            @param useColumnMajorOrdering    if true, indicates column first iteration, otherwise
                                             row first iteration is the default (if false).
        </member>
        <member name="M:NeoCortexApi.Entities.SparseBinaryMatrix.back(System.Int32,System.Int32[])">
            Sets the value on specified call in array and automattically calculates number of '1' bits as TrueCount.
            Called during mutation operations to simultaneously set the value
            on the backing array dynamically.
            @param val
            @param coordinates
        </member>
        <member name="M:NeoCortexApi.Entities.SparseBinaryMatrix.getSlice(System.Int32[])">
            Returns the slice specified by the passed in coordinates.
            The array is returned as an object, therefore it is the caller's
            responsibility to cast the array to the appropriate dimensions.
            
            @param coordinates	the coordinates which specify the returned array
            @return	the array specified
            @throws	IllegalArgumentException if the specified coordinates address
            			an actual value instead of the array holding it.
        </member>
        <member name="M:NeoCortexApi.Entities.SparseBinaryMatrix.rightVecSumAtNZ(System.Int32[],System.Int32[])">
            Fills the specified results array with the result of the 
            matrix vector multiplication.
            
            @param inputVector		the right side vector
            @param results			the results array
        </member>
        <member name="M:NeoCortexApi.Entities.SparseBinaryMatrix.rightVecSumAtNZ(System.Int32[],System.Int32[],System.Double)">
            Fills the specified results array with the result of the 
            matrix vector multiplication.
            
            @param inputVector       the right side vector
            @param results           the results array
        </member>
        <member name="M:NeoCortexApi.Entities.SparseBinaryMatrix.set(System.Int32,System.Int32[])">
            Sets the value to be indexed at the index
            computed from the specified coordinates.
            @param coordinates   the row major coordinates [outer --> ,...,..., inner]
            @param object        the object to be indexed.
        </member>
        <member name="M:NeoCortexApi.Entities.SparseBinaryMatrix.set(System.Int32[],System.Int32[])">
            Sets the specified values at the specified indexes.
            
            @param indexes   indexes of the values to be set
            @param values    the values to be indexed.
            
            @return this {@code SparseMatrix} implementation
        </member>
        <member name="M:NeoCortexApi.Entities.SparseBinaryMatrix.clearStatistics(System.Int32)">
            Clears the true counts prior to a cycle where they're
            being set
        </member>
        <!-- Badly formed XML comment ignored for member "T:NeoCortexApi.Entities.SparseObjectMatrix`1" -->
        <member name="F:NeoCortexApi.Entities.SparseObjectMatrix`1.serialVersionUID">
            keep it simple 
        </member>
        <member name="M:NeoCortexApi.Entities.SparseObjectMatrix`1.#ctor(System.Int32[])">
            Constructs a new {@code SparseObjectMatrix}
            @param dimensions	the dimensions of this array
        </member>
        <member name="M:NeoCortexApi.Entities.SparseObjectMatrix`1.#ctor(System.Int32[],System.Boolean)">
            Constructs a new {@code SparseObjectMatrix}
            @param dimensions					the dimensions of this array
            @param useColumnMajorOrdering		where inner index increments most frequently
        </member>
        <member name="M:NeoCortexApi.Entities.SparseObjectMatrix`1.set(System.Int32,`0)">
            Sets the object to occupy the specified index.
            
            @param index     the index the object will occupy
            @param object    the object to be indexed.
        </member>
        <member name="M:NeoCortexApi.Entities.SparseObjectMatrix`1.set(System.Int32[],`0)">
            Sets the specified object to be indexed at the index
            computed from the specified coordinates.
            @param object        the object to be indexed.
            @param coordinates   the row major coordinates [outer --> ,...,..., inner]
        </member>
        <member name="M:NeoCortexApi.Entities.SparseObjectMatrix`1.getObject(System.Int32)">
            Returns the T at the specified index.
            
            @param index     the index of the T to return
            @return  the T at the specified index.
        </member>
        <member name="M:NeoCortexApi.Entities.SparseObjectMatrix`1.get(System.Int32[])">
            Returns the T at the index computed from the specified coordinates
            @param coordinates   the coordinates from which to retrieve the indexed object
            @return  the indexed object
        </member>
        <member name="M:NeoCortexApi.Entities.SparseObjectMatrix`1.get(System.Int32)">
            Returns the T at the specified index.
            
            @param index     the index of the T to return
            @return  the T at the specified index.
        </member>
        <member name="M:NeoCortexApi.Entities.SparseObjectMatrix`1.getSparseIndices">
            Returns a sorted array of occupied indexes.
            @return  a sorted array of occupied indexes.
        </member>
        <member name="M:NeoCortexApi.Entities.SparseObjectMatrix`1.ToString">
            {@inheritDoc}
        </member>
        <member name="T:NeoCortexApi.Entities.Synapse">
            Represents a connection with varying strength which when above 
            a configured threshold represents a valid connection. 
            
            IMPORTANT: 	For DistalDendrites, there is only one synapse per pool, so the
            				synapse's index doesn't really matter (in terms of tracking its
            				order within the pool). In that case, the index is a global counter
            				of all distal dendrite synapses.
            
            				For ProximalDendrites, there are many synapses within a pool, and in
            				that case, the index specifies the synapse's sequence order within
            				the pool object, and may be referenced by that index.
               
            
            @author Chetan Surpur
            @author David Ray
            
            @see DistalDendrite
            @see Connections
        </member>
        <member name="F:NeoCortexApi.Entities.Synapse.sourceCell">
            <summary>
            Cell which activates this synapse. On proximal dendrite is this set on NULL. That means proximal dentrites have no presynaptic cell.
            </summary>
        </member>
        <member name="F:NeoCortexApi.Entities.Synapse.inputIndex">
            <summary>
            Index of pre-synaptic cell.
            </summary>
        </member>
        <member name="M:NeoCortexApi.Entities.Synapse.#ctor">
            Constructor used when setting parameters later.
        </member>
        <member name="M:NeoCortexApi.Entities.Synapse.#ctor(NeoCortexApi.Entities.Cell,NeoCortexApi.Entities.Segment,System.Int32,System.Double)">
            Constructs a new {@code Synapse} for a {@link DistalDendrite}
            @param sourceCell    the {@link Cell} which will activate this {@code Synapse};
            @param segment       the owning dendritic segment
            @param pool          this {@link Pool} of which this synapse is a member
            @param index         this {@code Synapse}'s index
            @param permanence    
        </member>
        <member name="M:NeoCortexApi.Entities.Synapse.#ctor(NeoCortexApi.Entities.Connections,NeoCortexApi.Entities.Cell,NeoCortexApi.Entities.Segment,NeoCortexApi.Entities.Pool,System.Int32,System.Int32)">
            Constructs a new {@code Synapse}
            
            @param c             the connections state of the temporal memory
            @param sourceCell    the {@link Cell} which will activate this {@code Synapse};
                                 Null if this Synapse is proximal
            @param segment       the owning dendritic segment
            @param pool		    this {@link Pool} of which this synapse is a member
            @param index         this {@code Synapse}'s index
            @param inputIndex	the index of this {@link Synapse}'s input; be it a Cell or InputVector bit.
        </member>
        <member name="M:NeoCortexApi.Entities.Synapse.getIndex">
            Returns this {@code Synapse}'s index.
            @return
        </member>
        <member name="M:NeoCortexApi.Entities.Synapse.getInputIndex">
            Returns the index of this {@code Synapse}'s input item
            whether it is a "sourceCell" or inputVector bit.
            @return
        </member>
        <member name="M:NeoCortexApi.Entities.Synapse.getPermanence">
            Returns this {@code Synapse}'s degree of connectedness.
            @return
        </member>
        <member name="M:NeoCortexApi.Entities.Synapse.setPermanence(NeoCortexApi.Entities.Connections,System.Double)">
            Sets this {@code Synapse}'s degree of connectedness.
            @param perm
        </member>
        <member name="M:NeoCortexApi.Entities.Synapse.getSegment">
            Returns the owning dendritic segment
            @return
        </member>
        <member name="M:NeoCortexApi.Entities.Synapse.setPresynapticCell(NeoCortexApi.Entities.Cell)">
            Called by {@link Connections#destroySynapse(Synapse)} to assign
            a reused Synapse to another presynaptic Cell
            @param cell  the new presynaptic cell
        </member>
        <member name="M:NeoCortexApi.Entities.Synapse.getPresynapticCell">
            Returns the containing {@link Cell} 
            @return
        </member>
        <member name="M:NeoCortexApi.Entities.Synapse.destroyed">
            Returns the flag indicating whether this segment has been destroyed.
            @return  the flag indicating whether this segment has been destroyed.
        </member>
        <member name="M:NeoCortexApi.Entities.Synapse.setDestroyed(System.Boolean)">
            Sets the flag indicating whether this segment has been destroyed.
            @param b the flag indicating whether this segment has been destroyed.
        </member>
        <member name="M:NeoCortexApi.Entities.Synapse.ToString">
            {@inheritDoc}
        </member>
        <member name="T:NeoCortexApi.Entities.TemporalTuple">
            <summary>
            Helpref class, which hold active columns, active segments and mathcing segments. 
            </summary>
        </member>
        <member name="P:NeoCortexApi.Entities.TemporalTuple.ActiveColumns">
            <summary>
            Holds active columns
            </summary>
        </member>
        <member name="T:NeoCortexApi.IComputeDecorator">
            <summary>
            Decorator interface for main algorithms .
            </summary>
        </member>
        <member name="M:NeoCortexApi.IComputeDecorator.Compute(NeoCortexApi.Entities.Connections,System.Int32[],System.Boolean)">
            Feeds input record through TM, performing inferencing and learning
            
            @param connections       the connection memory
            @param activeColumns     direct activated column input
            @param learn             learning mode flag
            @return                  {@link ComputeCycle} container for one cycle of inference values.
        </member>
        <member name="M:NeoCortexApi.IComputeDecorator.Reset(NeoCortexApi.Entities.Connections)">
            Called to start the input of a new sequence, and
            reset the sequence state of the TM.
            
            @param   connections   the Connections state of the temporal memory
        </member>
        <member name="T:NeoCortexApi.IHtmModule">
            <summary>
            Defines the interface, which needs to be implemented by all classes, which can be inserted as a layer in region.
            </summary>
        </member>
        <member name="M:NeoCortexApi.MovingAverage.#ctor(System.Collections.Generic.List{System.Double},System.Int32)">
            Constructs a new {@code MovingAverage}
            
            @param historicalValues  list of entry values
            @param windowSize        length over which to take the average
        </member>
        <member name="M:NeoCortexApi.MovingAverage.#ctor(System.Collections.Generic.List{System.Double},System.Double,System.Int32)">
            Constructs a new {@code MovingAverage}
            
            @param historicalValues  list of entry values
            @param windowSize        length over which to take the average
        </member>
        <member name="M:NeoCortexApi.MovingAverage.compute(System.Collections.Generic.List{System.Double},System.Double,System.Double,System.Int32)">
            Routine for computing a moving average
            
            @param slidingWindow     a list of previous values to use in the computation that
                                     will be modified and returned
            @param total             total the sum of the values in the  slidingWindow to be used in the
                                     calculation of the moving average
            @param newVal            newVal a new number to compute the new windowed average
            @param windowSize        windowSize how many values to use in the moving window
            @return
        </member>
        <member name="M:NeoCortexApi.MovingAverage.compute(NeoCortexApi.MovingAverage.Calculation,System.Collections.Generic.List{System.Double},System.Double,System.Double,System.Int32)">
            Internal method which does actual calculation
            
            @param calc              Re-used calculation object
            @param slidingWindow     a list of previous values to use in the computation that
                                     will be modified and returned
            @param total             total the sum of the values in the  slidingWindow to be used in the
                                     calculation of the moving average
            @param newVal            newVal a new number to compute the new windowed average
            @param windowSize        windowSize how many values to use in the moving window
            @return
        </member>
        <member name="M:NeoCortexApi.MovingAverage.next(System.Double)">
            Called to compute the next moving average value.
            
            @param newValue  new point data
            @return
        </member>
        <member name="M:NeoCortexApi.MovingAverage.getSlidingWindow">
            Returns the sliding window buffer used to calculate the moving average.
            @return
        </member>
        <member name="M:NeoCortexApi.MovingAverage.getTotal">
            Returns the current running total
            @return
        </member>
        <member name="M:NeoCortexApi.MovingAverage.getWindowSize">
            Returns the size of the window over which the 
            moving average is computed.
            
            @return
        </member>
        <member name="M:NeoCortexApi.MovingAverage.copyInto(NeoCortexApi.MovingAverage.Calculation,System.Collections.Generic.List{System.Double},System.Double,System.Double)">
            Internal method to update running totals.
            
            @param c
            @param slidingWindow
            @param value
            @param total
            @return
        </member>
        <member name="T:NeoCortexApi.MovingAverage.Calculation">
            <summary>
            Calculated data.
            </summary>
        </member>
        <member name="F:NeoCortexApi.MovingAverage.Calculation.Average">
            <summary>
            Returns the current value at this point in the calculation.
            </summary>
        </member>
        <member name="F:NeoCortexApi.MovingAverage.Calculation.HistoricalValues">
            <summary>
            Returns a list of calculated values in the order of their
            calculation.
            </summary>
        </member>
        <member name="F:NeoCortexApi.MovingAverage.Calculation.Total">
            <summary>
            Returns the total.
            </summary>
        </member>
        <member name="T:NeoCortexApi.Network.CortexNetworkContext">
            <summary>
            Holds general context information.
            </summary>
        </member>
        <member name="P:NeoCortexApi.Network.CortexNetworkContext.Encoders">
            <summary>
            Gets all available encoders.
            </summary>
        </member>
        <member name="M:NeoCortexApi.Network.CortexNetworkContext.#ctor">
            <summary>
            Loads all implemented encoders in all load assemblies.
            </summary>
        </member>
        <member name="M:NeoCortexApi.Network.CortexNetworkContext.CreateEncoder(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Creates the encoder instance from specified set of properties.
            </summary>
            <param name="encoderType"></param>
            <param name="encoderSettings"></param>
            <returns></returns>
        </member>
        <member name="F:NeoCortexApi.SpatialPooler.serialVersionUID">
            Default Serial Version  
        </member>
        <member name="M:NeoCortexApi.SpatialPooler.#ctor">
            Constructs a new {@code SpatialPooler}
        </member>
        <member name="M:NeoCortexApi.SpatialPooler.init(NeoCortexApi.Entities.Connections)">
            Initializes the specified {@link Connections} object which contains
            the memory and structural anatomy this spatial pooler uses to implement
            its algorithms.
            
            @param c     a {@link Connections} object
        </member>
        <member name="M:NeoCortexApi.SpatialPooler.initMatrices(NeoCortexApi.Entities.Connections)">
            Called to initialize the structural anatomy with configured values and prepare
            the anatomical entities for activation.
            
            @param c
        </member>
        <member name="M:NeoCortexApi.SpatialPooler.connectAndConfigureInputs(NeoCortexApi.Entities.Connections)">
            Step two of pooler initialization kept separate from initialization
            of static members so that they may be set at a different point in 
            the initialization (as sometimes needed by tests).
            
            This step prepares the proximal dendritic synapse pools with their 
            initial permanence values and connected inputs.
            
            @param c     the {@link Connections} memory
        </member>
        <member name="M:NeoCortexApi.SpatialPooler.compute(NeoCortexApi.Entities.Connections,System.Int32[],System.Int32[],System.Boolean)">
            This is the primary public method of the SpatialPooler class. This
            function takes a input vector and outputs the indices of the active columns.
            If 'learn' is set to True, this method also updates the permanences of the
            columns. 
            @param inputVector       An array of 0's and 1's that comprises the input to
                                     the spatial pooler. The array will be treated as a one
                                     dimensional array, therefore the dimensions of the array
                                     do not have to match the exact dimensions specified in the
                                     class constructor. In fact, even a list would suffice.
                                     The number of input bits in the vector must, however,
                                     match the number of bits specified by the call to the
                                     constructor. Therefore there must be a '0' or '1' in the
                                     array for every input bit.
            @param activeArray       An array whose size is equal to the number of columns.
                                     Before the function returns this array will be populated
                                     with 1's at the indices of the active columns, and 0's
                                     everywhere else.
            @param learn             A boolean value indicating whether learning should be
                                     performed. Learning entails updating the  permanence
                                     values of the synapses, and hence modifying the 'state'
                                     of the model. Setting learning to 'off' freezes the SP
                                     and has many uses. For example, you might want to feed in
                                     various inputs and examine the resulting SDR's.
        </member>
        <member name="M:NeoCortexApi.SpatialPooler.stripUnlearnedColumns(NeoCortexApi.Entities.Connections,System.Int32[])">
            Removes the set of columns who have never been active from the set of
            active columns selected in the inhibition round. Such columns cannot
            represent learned pattern and are therefore meaningless if only inference
            is required. This should not be done when using a random, unlearned SP
            since you would end up with no active columns.
             
            @param activeColumns An array containing the indices of the active columns
            @return  a list of columns with a chance of activation
        </member>
        <member name="M:NeoCortexApi.SpatialPooler.updateMinDutyCycles(NeoCortexApi.Entities.Connections)">
            Updates the minimum duty cycles defining normal activity for a column. A
            column with activity duty cycle below this minimum threshold is boosted.
             
            @param c
        </member>
        <member name="M:NeoCortexApi.SpatialPooler.updateMinDutyCyclesGlobal(NeoCortexApi.Entities.Connections)">
            Updates the minimum duty cycles in a global fashion. Sets the minimum duty
            cycles for the overlap and activation of all columns to be a percent of the
            maximum in the region, specified by {@link Connections#getMinOverlapDutyCycles()} and
            minPctActiveDutyCycle respectively. Functionality it is equivalent to
            {@link #updateMinDutyCyclesLocal(Connections)}, but this function exploits the globalness of the
            computation to perform it in a straightforward, and more efficient manner.
            
            @param c
        </member>
        <member name="M:NeoCortexApi.SpatialPooler.getColumnNeighborhood(NeoCortexApi.Entities.Connections,System.Int32,System.Int32)">
            Gets a neighborhood of columns.
            
            Simply calls topology.neighborhood or topology.wrappingNeighborhood
            
            A subclass can insert different topology behavior by overriding this method.
            
            @param c                     the {@link Connections} memory encapsulation
            @param centerColumn          The center of the neighborhood.
            @param inhibitionRadius      Span of columns included in each neighborhood
            @return                      The columns in the neighborhood (1D)
        </member>
        <member name="M:NeoCortexApi.SpatialPooler.updateMinDutyCyclesLocal(NeoCortexApi.Entities.Connections)">
            Updates the minimum duty cycles. The minimum duty cycles are determined
            locally. Each column's minimum duty cycles are set to be a percent of the
            maximum duty cycles in the column's neighborhood. Unlike
            {@link #updateMinDutyCyclesGlobal(Connections)}, here the values can be 
            quite different for different columns.
            
            @param c
        </member>
        <member name="M:NeoCortexApi.SpatialPooler.updateDutyCycles(NeoCortexApi.Entities.Connections,System.Int32[],System.Int32[])">
            Updates the duty cycles for each column. The OVERLAP duty cycle is a moving
            average of the number of inputs which overlapped with each column. The
            ACTIVITY duty cycles is a moving average of the frequency of activation for
            each column.
            
            @param c                 the {@link Connections} (spatial pooler memory)
            @param overlaps          an array containing the overlap score for each column.
                                     The overlap score for a column is defined as the number
                                     of synapses in a "connected state" (connected synapses)
                                     that are connected to input bits which are turned on.
            @param activeColumns     An array containing the indices of the active columns,
                                     the sparse set of columns which survived inhibition
        </member>
        <member name="M:NeoCortexApi.SpatialPooler.updateDutyCyclesHelper(NeoCortexApi.Entities.Connections,System.Double[],System.Double[],System.Double)">
             Updates a duty cycle estimate with a new value. This is a helper
             function that is used to update several duty cycle variables in
             the Column class, such as: overlapDutyCucle, activeDutyCycle,
             minPctDutyCycleBeforeInh, minPctDutyCycleAfterInh, etc. returns
             the updated duty cycle. Duty cycles are updated according to the following
             formula:
             
              
                            (period - 1)*dutyCycle + newValue
              dutyCycle := ----------------------------------
                                    period
            
             @param c             the {@link Connections} (spatial pooler memory)
             @param dutyCycles    An array containing one or more duty cycle values that need
                                  to be updated
             @param newInput      A new numerical value used to update the duty cycle. Typically 1 or 0
             @param period        The period of the duty cycle
             @return
        </member>
        <member name="M:NeoCortexApi.SpatialPooler.updateInhibitionRadius(NeoCortexApi.Entities.Connections)">
            Update the inhibition radius. The inhibition radius is a measure of the
            square (or hypersquare) of columns that each a column is "connected to"
            on average. Since columns are not connected to each other directly, we
            determine this quantity by first figuring out how many *inputs* a column is
            connected to, and then multiplying it by the total number of columns that
            exist for each input. For multiple dimension the aforementioned
            calculations are averaged over all dimensions of inputs and columns. This
            value is meaningless if global inhibition is enabled.
            
            @param c     the {@link Connections} (spatial pooler memory)
        </member>
        <member name="M:NeoCortexApi.SpatialPooler.avgColumnsPerInput(NeoCortexApi.Entities.Connections)">
            The average number of columns per input, taking into account the topology
            of the inputs and columns. This value is used to calculate the inhibition
            radius. This function supports an arbitrary number of dimensions. If the
            number of column dimensions does not match the number of input dimensions,
            we treat the missing, or phantom dimensions as 'ones'.
             
            @param c     the {@link Connections} (spatial pooler memory)
            @return
        </member>
        <member name="M:NeoCortexApi.SpatialPooler.getAvgSpanOfConnectedSynapsesForColumn(NeoCortexApi.Entities.Connections,System.Int32)">
            The range of connectedSynapses per column, averaged for each dimension.
            This value is used to calculate the inhibition radius. This variation of
            the function supports arbitrary column dimensions.
             
            @param c             the {@link Connections} (spatial pooler memory)
            @param columnIndex   the current column for which to avg.
            @return
            <summary>
            It traverses all connected synapses of the column and calculates the span, which synapses
            spans between all input bits. Then it calculates average of spans accross all dimensions. 
            </summary>
            <param name="c"></param>
            <param name="columnIndex"></param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.SpatialPooler.adaptSynapses(NeoCortexApi.Entities.Connections,System.Int32[],System.Int32[])">
            The primary method in charge of learning. Adapts the permanence values of
            the synapses based on the input vector, and the chosen columns after
            inhibition round. Permanence values are increased for synapses connected to
            input bits that are turned on, and decreased for synapses connected to
            inputs bits that are turned off.
            
            @param c                 the {@link Connections} (spatial pooler memory)
            @param inputVector       a integer array that comprises the input to
                                     the spatial pooler. There exists an entry in the array
                                     for every input bit.
            @param activeColumns     an array containing the indices of the columns that
                                     survived inhibition.
        </member>
        <member name="M:NeoCortexApi.SpatialPooler.bumpUpWeakColumns(NeoCortexApi.Entities.Connections)">
            This method increases the permanence values of synapses of columns whose
            activity level has been too low. Such columns are identified by having an
            overlap duty cycle that drops too much below those of their peers. The
            permanence values for such columns are increased.
             
            @param c
        </member>
        <member name="M:NeoCortexApi.SpatialPooler.raisePermanenceToThreshold(NeoCortexApi.Entities.Connections,System.Double[],System.Int32[])">
            This method ensures that each column has enough connections to input bits
            to allow it to become active. Since a column must have at least
            'stimulusThreshold' overlaps in order to be considered during the
            inhibition phase, columns without such minimal number of connections, even
            if all the input bits they are connected to turn on, have no chance of
            obtaining the minimum threshold. For such columns, the permanence values
            are increased until the minimum number of connections are formed.
            
            @param c                 the {@link Connections} memory
            @param perm              the permanence values
            @param maskPotential         
        </member>
        <member name="M:NeoCortexApi.SpatialPooler.raisePermanenceToThresholdSparse(NeoCortexApi.Entities.Connections,System.Double[])">
            This method ensures that each column has enough connections to input bits
            to allow it to become active. Since a column must have at least
            'stimulusThreshold' overlaps in order to be considered during the
            inhibition phase, columns without such minimal number of connections, even
            if all the input bits they are connected to turn on, have no chance of
            obtaining the minimum threshold. For such columns, the permanence values
            are increased until the minimum number of connections are formed.
            
            Note: This method services the "sparse" versions of corresponding methods
            
            @param c         The {@link Connections} memory
            @param perm      permanence values
        </member>
        <member name="M:NeoCortexApi.SpatialPooler.updatePermanencesForColumn(NeoCortexApi.Entities.Connections,System.Double[],NeoCortexApi.Entities.Column,System.Int32[],System.Boolean)">
            This method updates the permanence matrix with a column's new permanence
            values. The column is identified by its index, which reflects the row in
            the matrix, and the permanence is given in 'sparse' form, i.e. an array
            whose members are associated with specific indexes. It is in
            charge of implementing 'clipping' - ensuring that the permanence values are
            always between 0 and 1 - and 'trimming' - enforcing sparseness by zeroing out
            all permanence values below 'synPermTrimThreshold'. It also maintains
            the consistency between 'permanences' (the matrix storing the
            permanence values), 'connectedSynapses', (the matrix storing the bits
            each column is connected to), and 'connectedCounts' (an array storing
            the number of input bits each column is connected to). Every method wishing
            to modify the permanence matrix should do so through this method.
            
            @param c                 the {@link Connections} which is the memory model.
            @param perm              An array of permanence values for a column. The array is
                                     "dense", i.e. it contains an entry for each input bit, even
                                     if the permanence value is 0.
            @param column            The column in the permanence, potential and connectivity matrices
            @param maskPotential     The indexes of inputs in the specified {@link Column}'s pool.
            @param raisePerm         a boolean value indicating whether the permanence values
        </member>
        <member name="M:NeoCortexApi.SpatialPooler.updatePermanencesForColumnSparse(NeoCortexApi.Entities.Connections,System.Double[],NeoCortexApi.Entities.Column,System.Int32[],System.Boolean)">
            This method updates the permanence matrix with a column's new permanence
            values. The column is identified by its index, which reflects the row in
            the matrix, and the permanence is given in 'sparse' form, (i.e. an array
            whose members are associated with specific indexes). It is in
            charge of implementing 'clipping' - ensuring that the permanence values are
            always between 0 and 1 - and 'trimming' - enforcing sparseness by zeroing out
            all permanence values below 'synPermTrimThreshold'. Every method wishing
            to modify the permanence matrix should do so through this method.
            
            @param c                 the {@link Connections} which is the memory model.
            @param perm              An array of permanence values for a column. The array is
                                     "sparse", i.e. it contains an entry for each input bit, even
                                     if the permanence value is 0.
            @param column            The column in the permanence, potential and connectivity matrices
            @param raisePerm         a boolean value indicating whether the permanence values
        </member>
        <member name="M:NeoCortexApi.SpatialPooler.initPermConnected(NeoCortexApi.Entities.Connections)">
             Returns a randomly generated permanence value for a synapse that is
             initialized in a connected state. The basic idea here is to initialize
             permanence values very close to synPermConnected so that a small number of
             learning steps could make it disconnected or connected.
            
             Note: experimentation was done a long time ago on the best way to initialize
             permanence values, but the history for this particular scheme has been lost.
             
             @return  a randomly generated permanence value
        </member>
        <member name="M:NeoCortexApi.SpatialPooler.initPermNonConnected(NeoCortexApi.Entities.Connections)">
            Returns a randomly generated permanence value for a synapses that is to be
            initialized in a non-connected state.
            
            @return  a randomly generated permanence value
        </member>
        <member name="M:NeoCortexApi.SpatialPooler.initPermanence(NeoCortexApi.Entities.Connections,System.Int32[],System.Int32,System.Double)">
            Initializes the permanences of a column. The method
            returns a 1-D array the size of the input, where each entry in the
            array represents the initial permanence value between the input bit
            at the particular index in the array, and the column represented by
            the 'index' parameter.
            
            @param c                 the {@link Connections} which is the memory model
            @param potentialPool     An array specifying the potential pool of the column.
                                     Permanence values will only be generated for input bits
                                     corresponding to indices for which the mask value is 1.
                                     WARNING: potentialPool is sparse, not an array of "1's"
            @param index             the index of the column being initialized
            @param connectedPct      A value between 0 or 1 specifying the percent of the input
                                     bits that might maximally start off in a connected state.
                                     0.7 means, maximally 70% of potential might be connected
            @return
        </member>
        <member name="M:NeoCortexApi.SpatialPooler.mapColumn(NeoCortexApi.Entities.Connections,System.Int32)">
            Uniform Column Mapping 
            Maps a column to its respective input index, keeping to the topology of
            the region. It takes the index of the column as an argument and determines
            what is the index of the flattened input vector that is to be the center of
            the column's potential pool. It distributes the columns over the inputs
            uniformly. The return value is an integer representing the index of the
            input bit. Examples of the expected output of this method:
            * If the topology is one dimensional, and the column index is 0, this
              method will return the input index 0. If the column index is 1, and there
              are 3 columns over 7 inputs, this method will return the input index 3.
            * If the topology is two dimensional, with column dimensions [3, 5] and
              input dimensions [7, 11], and the column index is 3, the method
              returns input index 8. 
              
            @param columnIndex   The index identifying a column in the permanence, potential
                                 and connectivity matrices.
            @return              Flat index of mapped column.
        </member>
        <member name="M:NeoCortexApi.SpatialPooler.mapPotential(NeoCortexApi.Entities.Connections,System.Int32,System.Boolean)">
            Maps a column to its input bits. This method encapsulates the topology of
            the region. It takes the index of the column as an argument and determines
            what are the indices of the input vector that are located within the
            column's potential pool. The return value is a list containing the indices
            of the input bits. The current implementation of the base class only
            supports a 1 dimensional topology of columns with a 1 dimensional topology
            of inputs. To extend this class to support 2-D topology you will need to
            override this method. Examples of the expected output of this method:
            * If the potentialRadius is greater than or equal to the entire input
              space, (global visibility), then this method returns an array filled with
              all the indices
            * If the topology is one dimensional, and the potentialRadius is 5, this
              method will return an array containing 5 consecutive values centered on
              the index of the column (wrapping around if necessary).
            * If the topology is two dimensional (not implemented), and the
              potentialRadius is 5, the method should return an array containing 25
              '1's, where the exact indices are to be determined by the mapping from
              1-D index to 2-D position.
            
            @param c             {@link Connections} the main memory model
            @param columnIndex   The index identifying a column in the permanence, potential
                                 and connectivity matrices.
            @param wrapAround    A boolean value indicating that boundaries should be
                                 ignored.
            @return
        </member>
        <member name="M:NeoCortexApi.SpatialPooler.inhibitColumns(NeoCortexApi.Entities.Connections,System.Double[])">
            Performs inhibition. This method calculates the necessary values needed to
            actually perform inhibition and then delegates the task of picking the
            active columns to helper functions.
            
            @param c             the {@link Connections} matrix
            @param overlaps      an array containing the overlap score for each  column.
                                 The overlap score for a column is defined as the number
                                 of synapses in a "connected state" (connected synapses)
                                 that are connected to input bits which are turned on.
            @return
        </member>
        <member name="M:NeoCortexApi.SpatialPooler.inhibitColumnsGlobal(NeoCortexApi.Entities.Connections,System.Double[],System.Double)">
            <summary>
             Perform global inhibition. Performing global inhibition entails picking the
             top 'numActive' columns with the highest overlap score in the entire</summary>
             region. At most half of the columns in a local neighborhood are allowed to
             be active.
            <param name="c">Connections (memory)</param>
            <param name="overlaps">An array containing the overlap score for each  column.</param>
            <param name="density"> The fraction of the overlap score for a column is defined as the numbern of columns to survive inhibition.</param>
            <returns>We return all columns, whof synapses in a "connected state" (connected synapses)ich have overlap greather than stimulusThreshold.</returns>
        </member>
        <member name="M:NeoCortexApi.SpatialPooler.inhibitColumnsLocal(NeoCortexApi.Entities.Connections,System.Double[],System.Double)">
            Performs inhibition. This method calculates the necessary values needed to
            actually perform inhibition and then delegates the task of picking the
            active columns to helper functions.
            
            @param c         the {@link Connections} matrix
            @param overlaps  an array containing the overlap score for each  column.
                             The overlap score for a column is defined as the number
                             of synapses in a "connected state" (connected synapses)
                             that are connected to input bits which are turned on.
            @param density   The fraction of columns to survive inhibition. This
                             value is only an intended target. Since the surviving
                             columns are picked in a local fashion, the exact fraction
                             of surviving columns is likely to vary.
            @return  indices of the winning columns
        </member>
        <member name="M:NeoCortexApi.SpatialPooler.updateBoostFactors(NeoCortexApi.Entities.Connections)">
            Update the boost factors for all columns. The boost factors are used to
            increase the overlap of inactive columns to improve their chances of
            becoming active. and hence encourage participation of more columns in the
            learning process. This is a line defined as: y = mx + b boost =
            (1-maxBoost)/minDuty * dutyCycle + maxFiringBoost. Intuitively this means
            that columns that have been active enough have a boost factor of 1, meaning
            their overlap is not boosted. Columns whose active duty cycle drops too much
            below that of their neighbors are boosted depending on how infrequently they
            have been active. The more infrequent, the more they are boosted. The exact
            boost factor is linearly interpolated between the points (dutyCycle:0,
            boost:maxFiringBoost) and (dutyCycle:minDuty, boost:1.0).
            
                    boostFactor
                        ^
            maxBoost _  |
                        |\
                        | \
                  1  _  |  \ _ _ _ _ _ _ _
                        |
                        +--------------------> activeDutyCycle
                           |
                    minActiveDutyCycle
        </member>
        <member name="M:NeoCortexApi.SpatialPooler.calculateOverlap(NeoCortexApi.Entities.Connections,System.Int32[])">
            This function determines each column's overlap with the current input
            vector. The overlap of a column is the number of synapses for that column
            that are connected (permanence value is greater than '_synPermConnected')
            to input bits which are turned on. Overlap values that are lower than
            the 'stimulusThreshold' are ignored. The implementation takes advantage of
            the SpraseBinaryMatrix class to perform this calculation efficiently.
             
            @param c             the {@link Connections} memory encapsulation
            @param inputVector   an input array of 0's and 1's that comprises the input to
                                 the spatial pooler.
            @return
        </member>
        <member name="M:NeoCortexApi.SpatialPooler.calculateOverlapPct(NeoCortexApi.Entities.Connections,System.Int32[])">
            Return the overlap to connected counts ratio for a given column
            @param c
            @param overlaps
            @return
        </member>
        <member name="M:NeoCortexApi.SpatialPooler.isUpdateRound(NeoCortexApi.Entities.Connections)">
            Returns true if enough rounds have passed to warrant updates of
            duty cycles
            
            @param c the {@link Connections} memory encapsulation
            @return
        </member>
        <member name="M:NeoCortexApi.SpatialPooler.updateBookeepingVars(NeoCortexApi.Entities.Connections,System.Boolean)">
            Updates counter instance variables each cycle.
             
            @param c         the {@link Connections} memory encapsulation
            @param learn     a boolean value indicating whether learning should be
                             performed. Learning entails updating the  permanence
                             values of the synapses, and hence modifying the 'state'
                             of the model. setting learning to 'off' might be useful
                             for indicating separate training vs. testing sets.
        </member>
        <member name="M:NeoCortexApi.SpatialPooler.getInputNeighborhood(NeoCortexApi.Entities.Connections,System.Int32,System.Int32)">
            Gets a neighborhood of inputs.
            
            Simply calls topology.wrappingNeighborhood or topology.neighborhood.
            
            A subclass can insert different topology behavior by overriding this method.
            
            @param c                     the {@link Connections} memory encapsulation
            @param centerInput           The center of the neighborhood.
            @param potentialRadius       Span of the input field included in each neighborhood
            @return                      The input's in the neighborhood. (1D)
        </member>
        <member name="T:NeoCortexApi.TemporalMemory">
            Temporal Memory implementation in Java.
            
            @author Numenta
            @author cogmission
        </member>
        <member name="F:NeoCortexApi.TemporalMemory.serialVersionUID">
            simple serial version id 
        </member>
        <member name="M:NeoCortexApi.TemporalMemory.init(NeoCortexApi.Entities.Connections)">
            Uses the specified {@link Connections} object to Build the structural 
            anatomy needed by this {@code TemporalMemory} to implement its algorithms.
            
            The connections object holds the {@link Column} and {@link Cell} infrastructure,
            and is used by both the {@link SpatialPooler} and {@link TemporalMemory}. Either of
            these can be used separately, and therefore this Connections object may have its
            Columns and Cells initialized by either the init method of the SpatialPooler or the
            init method of the TemporalMemory. We check for this so that complete initialization
            of both Columns and Cells occurs, without either being redundant (initialized more than
            once). However, {@link Cell}s only get created when initializing a TemporalMemory, because
            they are not used by the SpatialPooler.
            
            @param   c       {@link Connections} object
        </member>
        <member name="M:NeoCortexApi.TemporalMemory.activateCells(NeoCortexApi.Entities.Connections,NeoCortexApi.Entities.ComputeCycle,System.Int32[],System.Boolean)">
            Calculate the active cells, using the current active columns and dendrite
            segments. Grow and reinforce synapses.
            
            <pre>
            Pseudocode:
              for each column
                if column is active and has active distal dendrite segments
                  call activatePredictedColumn
                if column is active and doesn't have active distal dendrite segments
                  call burstColumn
                if column is inactive and has matching distal dendrite segments
                  call punishPredictedColumn
                 
            </pre>
            
            @param conn                     
            @param activeColumnIndices
            @param learn
        </member>
        <member name="M:NeoCortexApi.TemporalMemory.activateDendrites(NeoCortexApi.Entities.Connections,NeoCortexApi.Entities.ComputeCycle,System.Boolean)">
            Calculate dendrite segment activity, using the current active cells.
            
            <pre>
            Pseudocode:
              for each distal dendrite segment with activity >= activationThreshold
                mark the segment as active
              for each distal dendrite segment with unconnected activity >= minThreshold
                mark the segment as matching
            </pre>
            
            @param conn     the Connectivity
            @param cycle    Stores current compute cycle results
            @param learn    If true, segment activations will be recorded. This information is used
                            during segment cleanup.
        </member>
        <member name="M:NeoCortexApi.TemporalMemory.reset(NeoCortexApi.Entities.Connections)">
            Indicates the start of a new sequence. Clears any predictions and makes sure
            synapses don't grow to the currently active cells in the next time step.
        </member>
        <member name="M:NeoCortexApi.TemporalMemory.activatePredictedColumn(NeoCortexApi.Entities.Connections,System.Collections.Generic.List{NeoCortexApi.Entities.DistalDendrite},System.Collections.Generic.List{NeoCortexApi.Entities.DistalDendrite},System.Collections.Generic.ICollection{NeoCortexApi.Entities.Cell},System.Collections.Generic.ICollection{NeoCortexApi.Entities.Cell},System.Double,System.Double,System.Boolean)">
            Determines which cells in a predicted column should be added to winner cells
            list, and learns on the segments that correctly predicted this column.
            
            @param conn                 the connections
            @param activeSegments       Active segments in the specified column
            @param matchingSegments     Matching segments in the specified column
            @param prevActiveCells      Active cells in `t-1`
            @param prevWinnerCells      Winner cells in `t-1`
            @param learn                If true, grow and reinforce synapses
            
            <pre>
            Pseudocode:
              for each cell in the column that has an active distal dendrite segment
                mark the cell as active
                mark the cell as a winner cell
                (learning) for each active distal dendrite segment
                  strengthen active synapses
                  weaken inactive synapses
                  grow synapses to previous winner cells
            </pre>
            
            @return A list of predicted cells that will be added to active cells and winner
                    cells.
        </member>
        <!-- Badly formed XML comment ignored for member "M:NeoCortexApi.TemporalMemory.BurstColumn(NeoCortexApi.Entities.Connections,NeoCortexApi.Entities.Column,System.Collections.Generic.List{NeoCortexApi.Entities.DistalDendrite},System.Collections.Generic.ICollection{NeoCortexApi.Entities.Cell},System.Collections.Generic.ICollection{NeoCortexApi.Entities.Cell},System.Double,System.Double,System.Random,System.Boolean)" -->
        <member name="M:NeoCortexApi.TemporalMemory.getSegmentwithHighesPotential(NeoCortexApi.Entities.Connections,System.Collections.Generic.List{NeoCortexApi.Entities.DistalDendrite})">
            <summary>
            Gets the segment with maximal potential.
            </summary>
            <param name="conn"></param>
            <param name="matchingSegments"></param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.TemporalMemory.punishPredictedColumn(NeoCortexApi.Entities.Connections,System.Collections.Generic.List{NeoCortexApi.Entities.DistalDendrite},System.Collections.Generic.List{NeoCortexApi.Entities.DistalDendrite},System.Collections.Generic.ICollection{NeoCortexApi.Entities.Cell},System.Collections.Generic.ICollection{NeoCortexApi.Entities.Cell},System.Double)">
            Punishes the Segments that incorrectly predicted a column to be active.
            
            <p>
            <pre>
            Pseudocode:
             for each matching segment in the column
               weaken active synapses
            </pre>
            </p>
              
            @param conn                              Connections instance for the tm
            @param activeSegments                    An iterable of {@link DistalDendrite} actives
            @param matchingSegments                  An iterable of {@link DistalDendrite} matching
                                                     for the column compute is operating on
                                                     that are matching; None if empty
            @param prevActiveCells                   Active cells in `t-1`
            @param prevWinnerCells                   Winner cells in `t-1`
                                                     are decremented during learning.
            @param predictedSegmentDecrement         Amount by which segments are punished for incorrect predictions
        </member>
        <member name="M:NeoCortexApi.TemporalMemory.leastUsedCell(NeoCortexApi.Entities.Connections,System.Collections.Generic.IList{NeoCortexApi.Entities.Cell},System.Random)">
            Gets the cell with the smallest number of segments.
            Break ties randomly.
            
            @param conn      Connections instance for the tm
            @param cells     List of {@link Cell}s
            @param random    Random Number Generator
            
            @return  the least used {@code Cell}
        </member>
        <member name="M:NeoCortexApi.TemporalMemory.growSynapses(NeoCortexApi.Entities.Connections,System.Collections.Generic.ICollection{NeoCortexApi.Entities.Cell},NeoCortexApi.Entities.DistalDendrite,System.Double,System.Int32,System.Random)">
            Creates nDesiredNewSynapes synapses on the segment passed in if
            possible, choosing random cells from the previous winner cells that are
            not already on the segment.
            <p>
            <b>Notes:</b> The process of writing the last value into the index in the array
            that was most recently changed is to ensure the same results that we get
            in the c++ implementation using iter_swap with vectors.
            </p>
            
            @param conn                      Connections instance for the tm
            @param prevWinnerCells           Winner cells in `t-1`
            @param segment                   Segment to grow synapses on.     
            @param initialPermanence         Initial permanence of a new synapse.
            @param nDesiredNewSynapses       Desired number of synapses to grow
            @param random                    Tm object used to generate random
                                             numbers
        </member>
        <member name="M:NeoCortexApi.TemporalMemory.adaptSegment(NeoCortexApi.Entities.Connections,NeoCortexApi.Entities.DistalDendrite,System.Collections.Generic.ICollection{NeoCortexApi.Entities.Cell},System.Double,System.Double)">
            Updates synapses on segment.
            Strengthens active synapses; weakens inactive synapses.
             
            @param conn                      {@link Connections} instance for the tm
            @param segment                   {@link DistalDendrite} to adapt
            @param prevActiveCells           Active {@link Cell}s in `t-1`
            @param permanenceIncrement       Amount to increment active synapses    
            @param permanenceDecrement       Amount to decrement inactive synapses
        </member>
        <member name="T:NeoCortexApi.TemporalMemory.ColumnData">
            Used in the {@link TemporalMemory#compute(Connections, int[], boolean)} method
            to make pulling values out of the {@link GroupBy2} more readable and named.
        </member>
        <member name="F:NeoCortexApi.TemporalMemory.ColumnData.serialVersionUID">
            Default Serial 
        </member>
        <member name="M:NeoCortexApi.TemporalMemory.ColumnData.isExistsAnyActiveCol(System.Int32)">
            Returns a boolean flag indicating whether the slot contained by the
            tuple at the specified index is filled with the special empty
            indicator.
            
            @param memberIndex   the index of the tuple to assess.
            @return  true if <em><b>not</b></em> none, false if it <em><b>is none</b></em>.
        </member>
        <member name="T:NeoCortexApi.Utility.ArrayUtils">
            Utilities to match some of the functionality found in Python's Numpy.
            @author David Ray
        </member>
        <member name="F:NeoCortexApi.Utility.ArrayUtils.EMPTY_ARRAY">
            Empty array constant 
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.product(System.Int32[])">
            Returns the product of each integer in the specified array.
            
            @param dims
            @return
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.interleave``2(``0,``1)">
            Returns an array containing the successive elements of each
            argument array as in [ first[0], second[0], first[1], second[1], ... ].
            
            Arrays may be of zero length, and may be of different sizes, but may not be null.
            
            @param first     the first array
            @param second    the second array
            @return
        </member>
        <!-- Badly formed XML comment ignored for member "M:NeoCortexApi.Utility.ArrayUtils.diff(System.Double[])" -->
        <member name="M:NeoCortexApi.Utility.ArrayUtils.contains(System.Int32[],System.Collections.Generic.List{System.Int32[]})">
             Returns a flag indicating whether the container list contains an
             array which matches the specified match array.
            
             @param match     the array to match
             @param container the list of arrays to test
             @return true if so, false if not
        </member>
        <!-- Badly formed XML comment ignored for member "M:NeoCortexApi.Utility.ArrayUtils.argsort(System.Int32[])" -->
        <!-- Badly formed XML comment ignored for member "M:NeoCortexApi.Utility.ArrayUtils.argsort(System.Int32[],System.Int32,System.Int32)" -->
        <member name="M:NeoCortexApi.Utility.ArrayUtils.bitsToString(System.Int32[])">
             Returns a string representing an array of 0's and 1's
            
             @param arr an binary array (0's and 1's only)
             @return
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.Zip``2(System.Collections.Generic.List{``0},System.Collections.Generic.List{``1})">
             Return a list of tuples, where each tuple contains the i-th element
             from each of the argument sequences.  The returned list is
             truncated in length to the length of the shortest argument sequence.
            
             @param arg1 the first list to be the zero'th entry in the returned tuple
             @param arg2 the first list to be the one'th entry in the returned tuple
             @return a list of tuples
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.toIntArray(System.Double[])">
             Returns an array with the same shape and the contents
             converted to integers.
            
             @param doubs an array of doubles.
             @return
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.toDoubleArray(System.Int32[])">
             Returns an array with the same shape and the contents
             converted to doubles.
            
             @param ints an array of ints.
             @return
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.modulo(System.Int32,System.Int32)">
             Performs a modulus operation in Python style.
            
             @param a
             @param b
             @return
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.modulo(System.Int32[],System.Int32)">
             Performs a modulus on every index of the first argument using
             the second argument and places the result in the same index of
             the first argument.
            
             @param a
             @param b
             @return
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.maximum(System.Double[],System.Double)">
            Returns a double array whose values are the maximum of the value
            in the array and the max value argument.
            @param doubs
            @param maxValue
            @return
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.maxBetween(System.Int32[],System.Int32[])">
             Returns an array of identical shape containing the maximum
             of the values between each corresponding index. Input arrays
             must be the same length.
            
             @param arr1
             @param arr2
             @return
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.minBetween(System.Int32[],System.Int32[])">
             Returns an array of identical shape containing the minimum
             of the values between each corresponding index. Input arrays
             must be the same length.
            
             @param arr1
             @param arr2
             @return
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.divide(System.Double[],System.Double[],System.Double,System.Double)">
             Returns an array whose members are the quotient of the dividend array
             values and the divisor array values.
            
             @param dividend
             @param divisor
             @param dividend adjustment
             @param divisor  adjustment
            
             @return
             @throws IllegalArgumentException if the two argument arrays are not the same length
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.divide(System.Int32[],System.Int32[])">
             Returns an array whose members are the quotient of the dividend array
             values and the divisor array values.
            
             @param dividend
             @param divisor
             @param dividend adjustment
             @param divisor  adjustment
            
             @return
             @throws IllegalArgumentException if the two argument arrays are not the same length
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.divide(System.Double[],System.Double)">
             Returns an array whose members are the quotient of the dividend array
             values and the divisor value.
            
             @param dividend
             @param divisor
             @param dividend adjustment
             @param divisor  adjustment
            
             @return
             @throws IllegalArgumentException if the two argument arrays are not the same length
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.multiply(System.Double[],System.Double[],System.Double,System.Double)">
             Returns an array whose members are the product of the multiplicand array
             values and the factor array values.
            
             @param multiplicand
             @param factor
             @param multiplicandAdjustment
             @param factorAdjustment
            
             @return
             @throws IllegalArgumentException if the two argument arrays are not the same length
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.IndexWhere``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Gets index of item in array, which satisfies specified condition.
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.multiply(System.Double[],System.Int32[])">
             Returns an array whose members are the product of the multiplicand array
             values and the factor array values.
            
             @param multiplicand
             @param factor
             @param multiplicand adjustment
             @param factor       adjustment
            
             @return
             @throws IllegalArgumentException if the two argument arrays are not the same length
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.multiply(System.Int32[],System.Int32)">
             Returns a new array containing the result of multiplying
             each index of the specified array by the 2nd parameter.
            
             @param array
             @param d
             @return
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.multiply(System.Double[],System.Double)">
             Returns a new array containing the result of multiplying
             each index of the specified array by the 2nd parameter.
            
             @param array
             @param d
             @return
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.subtract(System.Int32[],System.Int32[])">
             Returns an integer array containing the result of subtraction
             operations between corresponding indexes of the specified arrays.
            
             @param minuend
             @param subtrahend
             @return
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.average(System.Int32[])">
            Returns the average of all the specified array contents.
            @param arr
            @return
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.average(System.Double[])">
            Returns the average of all the specified array contents.
            @param arr
            @return
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.variance(System.Double[],System.Double)">
            Computes and returns the variance.
            @param arr
            @param mean
            @return
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.variance(System.Double[])">
            Computes and returns the variance.
            @param arr
            @return
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.add(System.Int32[],System.Int32)">
             Returns the passed in array with every value being altered
             by the addition of the specified amount.
            
             @param arr
             @param amount
             @return
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.i_add(System.Int32[],System.Int32[])">
             Returns the passed in array with every value being altered
             by the addition of the specified double amount at the same
             index
            
             @param arr
             @param amount
             @return
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.d_add(System.Double[],System.Double[])">
             Returns the passed in array with every value being altered
             by the addition of the specified double amount at the same
             index
            
             @param arr
             @param amount
             @return
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.d_add(System.Double[],System.Double)">
             Returns the passed in array with every value being altered
             by the addition of the specified double amount
            
             @param arr
             @param amount
             @return
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.sum(System.Int32[])">
            Returns the sum of all contents in the specified array.
            @param array
            @return
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.sum(System.Double[])">
            Returns the sum of all contents in the specified array.
            @param array
            @return
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.positiveRemainder(System.Double,System.Double)">
             Another utility to account for the difference between Python and Java.
             Here the modulo operator is defined differently.
            
             @param n
             @param divisor
             @return
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.range(System.Int32,System.Int32)">
             Returns an array which starts from lowerBounds (inclusive) and
             ends at the upperBounds (exclusive).
            
             @param lowerBounds
             @param upperBounds
             @return
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.shuffle(System.Int32[])">
            Fisher-Yates implementation which shuffles the array contents.
            
            @param array     the array of ints to shuffle.
            @return shuffled array
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.replace(System.Int32,System.Int32,System.Int32[],System.Int32[])">
            Replaces the range specified by "start" and "end" of "orig" with the 
            array of replacement ints found in "replacement".
            
            @param start         start index of "orig" to be replaced
            @param end           end index of "orig" to be replaced
            @param orig          the array containing entries to be replaced by "replacement"
            @param replacement   the array of ints to put in "orig" in the indicated indexes
            @return
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.unique(System.Int32[])">
             Returns a sorted unique (dupicates removed) array of integers
            
             @param nums an unsorted array of integers with possible duplicates.
             @return
        </member>
        <member name="T:NeoCortexApi.Utility.ArrayUtils.CoordinateAssembler">
            Helper Class for recursive coordinate assembling
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.dimensionsToCoordinateList(System.Collections.Generic.List{System.Int32[]})">
             Called to merge a list of dimension arrays into a sequential row-major indexed
             list of coordinates.
            
             @param dimensions a list of dimension arrays, each array being a dimension
                               of an n-dimensional array.
             @return a list of n-dimensional coordinates in row-major format.
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.setIndexesTo(System.Double[],System.Int32[],System.Double)">
             Sets the values in the specified values array at the indexes specified,
             to the value "setTo".
            
             @param values  the values to alter if at the specified indexes.
             @param indexes the indexes of the values array to alter
             @param setTo   the value to set at the specified indexes.
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.setIndexesTo(System.Int32[],System.Int32[],System.Int32)">
             Sets the values in the specified values array at the indexes specified,
             to the value "setTo".
            
             @param values  the values to alter if at the specified indexes.
             @param indexes the indexes of the values array to alter
             @param setTo   the value to set at the specified indexes.
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.setRangeTo(System.Int32[],System.Int32,System.Int32,System.Int32)">
             Sets the values in range start to stop to the value specified. If
             stop &lt; 0, then stop indicates the number of places counting from the
             length of "values" back.
            
             @param values the array to alter
             @param start  the start index (inclusive)
             @param stop   the end index (exclusive)
             @param setTo  the value to set the indexes to
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.sample(System.Int32[],System.Int32[],System.Random)">
             Returns a random, sorted, and  unique array of the specified sample size of
             selections from the specified list of choices.
            
             @param sampleSize the number of selections in the returned sample
             @param choices    the list of choices to select from
             @param random     a random number generator
             @return a sample of numbers of the specified size
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.sample(System.Int32,System.Random)">
            Returns a double[] filled with random doubles of the specified size.
            @param sampleSize
            @param random
            @return
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.clip(System.Double[],System.Double,System.Double)">
             Ensures that each entry in the specified array has a min value
             equal to or greater than the specified min and a maximum value less
             than or equal to the specified max.
             For example, if min = 0, then negative permanence values will be rounded to 0.
             Similarly, high permanences will be rounded by maximal value.
            
             @param values the values to clip
             @param min    the minimum value
             @param max    the maximum value
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.clip(System.Int32[],System.Int32[],System.Int32[])">
             Ensures that each entry in the specified array has a min value
             equal to or greater than the min at the specified index and a maximum value less
             than or equal to the max at the specified index.
            
             @param values the values to clip
             @param min    the minimum value
             @param max    the maximum value
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.clip(System.Int32[],System.Int32[],System.Int32)">
             Ensures that each entry in the specified array has a min value
             equal to or greater than the min at the specified index and a maximum value less
             than or equal to the max at the specified index.
            
             @param values the values to clip
             @param max    the minimum value
             @param adj    the adjustment amount
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.valueGreaterCount(System.Double,System.Double[])">
             Returns the count of values in the specified array that are
             greater than the specified compare value
            
             @param compare the value to compare to
             @param array   the values being compared
            
             @return the count of values greater
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.valueGreaterOrEqualCount(System.Double,System.Double[])">
             Returns the count of values in the specified array that are
             greater than or equal to, the specified compare value.
            
             @param compare the value to compare to
             @param array   the values being compared
            
             @return the count of values greater
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.valueGreaterCountAtIndex(System.Double,System.Double[],System.Int32[])">
             Returns the number of values in the specified array that are greater than the specified 'compare' value.
            
             @param compare the value to compare to
             @param array   the values being compared
            
             @return the count of values greater
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.nGreatest(System.Double[],System.Int32)">
            Returns an array containing the n greatest values.
            @param array
            @param n
            @return
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.raiseValuesBy(System.Double,System.Double[])">
            Raises the values in the specified array by the amount specified
            @param amount the amount to raise the values
            @param values the values to raise
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.raiseValuesBy(System.Double,System.Double[],System.Int32[])">
            Raises the values at the indexes specified by the amount specified.
            @param amount the amount to raise the values
            @param values the values to raise
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.raiseValuesBy(System.Double[],System.Double[])">
            Raises the values at the indexes specified by the amount specified.
            @param amounts the amounts to raise the values
            @param values the values to raise
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.raiseValuesBy(System.Int32,System.Int32[],System.Int32[])">
             Raises the values at the indicated indexes, by the amount specified
            
             @param amount
             @param indexes
             @param values
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.isSparse(System.Int32[])">
            Returns a flag indicating whether the specified array
            is a sparse array of 0's and 1's or not.
            
            @param ia
            @return
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.asDense(System.Int32[],System.Int32)">
            Returns a bit vector of the specified size whose "on" bit
            indexes are specified in "in"; basically converting a sparse
            array to a dense one.
            
            @param inp       the sparse array specifying the on bits of the returned array
            @param size    the size of the dense array to be returned.
            @return
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.lessThanOrEqualXThanSetToY(System.Double[],System.Double,System.Double)">
            Makes all values in the specified array which are less than or equal to the specified
            "x" value, equal to the specified "y".
            @param array
            @param x     the comparison
            @param y     the value to set if the comparison fails
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.lessThanXThanSetToY(System.Double[],System.Double,System.Double)">
            Makes all values in the specified array which are less than the specified
            "x" value, equal to the specified "y".
            @param array
            @param x     the comparison
            @param y     the value to set if the comparison fails
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.lessThanXThanSetToY(System.Int32[],System.Int32,System.Int32)">
            Makes all values in the specified array which are less than the specified
            "x" value, equal to the specified "y".
            @param array
            @param x     the comparison
            @param y     the value to set if the comparison fails
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.greaterThanOrEqualXThanSetToY(System.Double[],System.Double,System.Double)">
            Makes all values in the specified array which are greater than or equal to the specified
            "x" value, equal to the specified "y".
            @param array
            @param x     the comparison
            @param y     the value to set if the comparison fails
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.greaterThanXThanSetToY(System.Double[],System.Double,System.Double)">
             Makes all values in the specified array which are greater than the specified
             "x" value, equal to the specified "y".
            
             @param array
             @param x     the comparison
             @param y     the value to set if the comparison fails
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.greaterThanXThanSetToY(System.Int32[],System.Int32,System.Int32)">
            Makes all values in the specified array which are greater than the specified
            "x" value, equal to the specified "y".
            @param array
            @param x     the comparison
            @param y     the value to set if the comparison fails
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.greaterThanXThanSetToYInB(System.Int32[],System.Double[],System.Int32,System.Double)">
            Sets value to "y" in "targetB" if the value in the same index in "sourceA" is bigger than "x".
            @param sourceA array to compare elements with X
            @param targetB array to set elements to Y
            @param x     the comparison
            @param y     the value to set if the comparison fails
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.argmax(System.Int32[])">
            Returns the index of the max value in the specified array
            @param array the array to find the max value index in
            @return the index of the max value
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.toBytes(System.Boolean[])">
            Returns a byte array transformed from the specified boolean array.
            @param input     the boolean array to transform to a byte array
            @return          a byte array
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.toPrimitive(NeoCortexApi.Entities.Integer[])">
            Converts an array of Integer objects to an array of its
            primitive form.
            
            @param doubs
            @return
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.toPrimitive(System.Double[])">
            Converts an array of Double objects to an array of its
            primitive form.
            
            @param doubs
            @return
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.argmax(System.Double[])">
            Returns the index of the max value in the specified array
            @param array the array to find the max value index in
            @return the index of the max value
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.max(System.Int32[])">
            Returns the maximum value in the specified array
            @param array
            @return
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.max(System.Double[])">
            Returns the maximum value in the specified array
            @param array
            @return
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.ListOfValuesByIndicies(System.Double[],System.Int32[])">
             Returns a new array containing the items specified from
             the source array by the indexes specified.
            
             @param source
             @param indexes
             @return
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.sub(System.Int32[],System.Int32[])">
             Returns a new array containing the items specified from
             the source array by the indexes specified.
            
             @param source
             @param indexes
             @return
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.sub(System.Int32[][],System.Int32[])">
             Returns a new 2D array containing the items specified from
             the source array by the indexes specified.
            
             @param source
             @param indexes
             @return
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.min(System.Int32[])">
            Returns the minimum value in the specified array
            @param array
            @return
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.min(System.Double[])">
            Returns the minimum value in the specified array
            @param array
            @return
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.reverse(System.Int32[])">
             Returns a copy of the specified integer array in
             reverse order
            
             @param d
             @return
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.reverse(System.Double[])">
             Returns a copy of the specified double array in
             reverse order
            
             @param d
             @return
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.or(System.Int32[],System.Int32[])">
             Returns a new int array containing the or'd on bits of
             both arg1 and arg2.
            
             @param arg1
             @param arg2
             @return
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.and(System.Int32[],System.Int32[])">
             Returns a new int array containing the and'd bits of
             both arg1 and arg2.
            
             @param arg1
             @param arg2
             @return
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.tail(System.Int32[])">
             Copies the passed array <tt>original</tt>  into a new array except first element and returns it
            
             @param original the array from which a tail is taken
             @return a new array containing the tail from the original array
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.setValue(System.Array,System.Int32,System.Int32[])">
             Set <tt></tt>value for <tt>array</tt> at specified position <tt>indexes</tt>
            
             @param array
             @param value
             @param indexes
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.getValue(System.Array,System.Int32[])">
             Get <tt>value</tt> for <tt>array</tt> at specified position <tt>indexes</tt>
            
             @param array
             @param indexes
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.fillArray(System.Object,System.Int32)">
            Assigns the specified int value to each element of the specified any dimensional array
             of ints.
             @param array
             @param value
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.Fill(System.Array,System.Object)">
            <summary>
            Fills the array with specified value.
            </summary>
            <param name="array"></param>
            <param name="value"></param>
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.GetRow``1(``0[0:,0:],System.Int32)">
            <summary>
            Gets the access to a row inside of multidimensional array.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.GetRowNotUsed``1(``0[0:,0:],System.Int32)">
            <summary>
            Gets the access to a row inside of multidimensional array.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.aggregateArray(System.Object)">
            Aggregates all element of multi dimensional array of ints
            @param array
            @return sum of all array elements
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.AreEqual``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``1})">
             Concat int arrays
            
             @return The concatenated array
            
             http://stackoverflow.com/a/784842
        </member>
        <member name="T:NeoCortexApi.Utility.Coordinator">
            Specializes in handling coordinate transforms for N-dimensional
            integer arrays, between flat and coordinate indexing.
            
            @author cogmission
            @see Topology
        </member>
        <member name="F:NeoCortexApi.Utility.Coordinator.serialVersionUID">
            keep it simple 
        </member>
        <member name="F:NeoCortexApi.Utility.Coordinator.isColumnMajor">
            <summary>
            
            </summary>
        </member>
        <member name="M:NeoCortexApi.Utility.Coordinator.#ctor(System.Int32[])">
            Constructs a new {@link Coordinator} object to be configured with specified
            dimensions and major ordering.
            @param shape  the dimensions of this matrix 
        </member>
        <member name="M:NeoCortexApi.Utility.Coordinator.#ctor(System.Int32[],System.Boolean)">
            Constructs a new {@link Coordinator} object to be configured with specified
            dimensions and major ordering.
            
            @param shape                     the dimensions of this sparse array 
            @param useColumnMajorOrdering    flag indicating whether to use column ordering or
                                             row major ordering. if false (the default), then row
                                             major ordering will be used. If true, then column major
                                             ordering will be used.
        </member>
        <member name="M:NeoCortexApi.Utility.Coordinator.computeIndex(System.Int32[])">
            Returns a flat index computed from the specified coordinates
            which represent a "dimensioned" index.
            
            @param   coordinates     an array of coordinates
            @return  a flat index
        </member>
        <member name="M:NeoCortexApi.Utility.Coordinator.computeCoordinates(System.Int32)">
            Returns an array of coordinates calculated from
            a flat index.
            
            @param   index   specified flat index
            @return  a coordinate array
        </member>
        <member name="M:NeoCortexApi.Utility.Coordinator.initDimensionMultiples(System.Int32[])">
            Initializes internal helper array which is used for multidimensional
            index computation.
            @param dimensions matrix dimensions
            @return array for use in coordinates to flat index computation.
        </member>
        <member name="M:NeoCortexApi.Utility.Coordinator.reverse(System.Int32[])">
            Reverses the specified array.
            @param input
            @return
        </member>
        <!-- Badly formed XML comment ignored for member "T:NeoCortexApi.Utility.GroupBy`2" -->
        <member name="F:NeoCortexApi.Utility.GroupBy`2.m_IsStarted">
            serial version 
        </member>
        <member name="M:NeoCortexApi.Utility.GroupBy`2.#ctor(System.Collections.Generic.List{`0},System.Func{`0,`1})">
            Constructs a new {@code GroupBy}
            
            @param l     the {@link List} containing the items used as input to the
                         key generating function.     
            @param fn    the {@link Function} to be used to generate the keys which describe
                         the like contents of each grouping.
        </member>
        <member name="M:NeoCortexApi.Utility.GroupBy`2.From(System.Collections.Generic.List{`0},System.Func{`0,`1})">
            Returns a new {@code GroupBy} composed from the specified list 
            and key-generating {@link Function}
            
            @param l     the {@link List} containing the items used as input to the
                         key generating function.     
            @param fn    the {@link Function} to be used to generate the keys which describe
                         the like contents of each grouping.
            @return
        </member>
        <member name="M:NeoCortexApi.Utility.GroupBy`2.peek">
            {@inheritDoc}
        </member>
        <member name="M:NeoCortexApi.Utility.GroupBy`2.MoveNext">
            <summary>
            Moves to the nex pair.
            </summary>
            <returns></returns>
        </member>
        <member name="P:NeoCortexApi.Utility.GroupBy`2.NextPair">
            <summary>
            Shows the next pair, but it does not move internal pointer to it.
            </summary>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:NeoCortexApi.Utility.GroupBy2`1" -->
        <member name="F:NeoCortexApi.Utility.GroupBy2`1.entries">
            stores the user inputted pairs 
        </member>
        <member name="F:NeoCortexApi.Utility.GroupBy2`1.advanceList">
            the current interation's minimum key value 
        </member>
        <member name="M:NeoCortexApi.Utility.GroupBy2`1.#ctor(NeoCortexApi.Entities.Pair{System.Collections.Generic.List{System.Object},System.Func{System.Object,`0}}[])">
            Private internally used constructor. To instantiate objects of this
            class, please see the static factory method {@link #of(Pair...)}
            
            @param entries   a {@link Pair} of lists and their key-producing functions
        </member>
        <!-- Badly formed XML comment ignored for member "M:NeoCortexApi.Utility.GroupBy2`1.of(NeoCortexApi.Entities.Pair{System.Collections.Generic.List{System.Object},System.Func{System.Object,`0}}[])" -->
        <member name="M:NeoCortexApi.Utility.GroupBy2`1.reset">
            <summary>
            Populates generator list with entries and fills the next(List with empty elements.
            </summary>
        </member>
        <member name="M:NeoCortexApi.Utility.GroupBy2`1.next(`0)">
            Returns a {@link Tuple} containing the current key in the
            zero'th slot, and a list objects which are members of the
            group specified by that key.
            
            {@inheritDoc}
        </member>
        <!-- Badly formed XML comment ignored for member "T:NeoCortexApi.Utility.GroupBy2`1.Slot`1" -->
        <member name="F:NeoCortexApi.Utility.GroupBy2`1.Slot`1.NONE">
            Common instance for {@code empty()}.
        </member>
        <!-- Badly formed XML comment ignored for member "M:NeoCortexApi.Utility.GroupBy2`1.Slot`1.empty" -->
        <member name="F:NeoCortexApi.Utility.GroupBy2`1.Slot`1.value">
            If non-null, the value; if null, indicates no value is present
        </member>
        <member name="M:NeoCortexApi.Utility.GroupBy2`1.Slot`1.#ctor(`1)">
             Constructs an instance with the value present.
            
             @param value the non-null value to be present
             @throws NullPointerException if value is null
        </member>
        <!-- Badly formed XML comment ignored for member "M:NeoCortexApi.Utility.GroupBy2`1.Slot`1.of(`1)" -->
        <!-- Badly formed XML comment ignored for member "M:NeoCortexApi.Utility.GroupBy2`1.Slot`1.ofNullable(`1)" -->
        <member name="M:NeoCortexApi.Utility.GroupBy2`1.Slot`1.get">
             If a value is present in this {@code Slot}, returns the value,
             otherwise throws {@code NoSuchElementException}.
            
             @return the non-null value held by this {@code Slot}
             @throws NoSuchElementException if there is no value present
            
             @see Slot#isPresent()
        </member>
        <member name="M:NeoCortexApi.Utility.GroupBy2`1.Slot`1.isPresent">
             Return {@code true} if there is a value present, otherwise {@code false}.
            
             @return {@code true} if there is a value present, otherwise {@code false}
        </member>
        <!-- Badly formed XML comment ignored for member "M:NeoCortexApi.Utility.GroupBy2`1.Slot`1.Equals(System.Object)" -->
        <member name="M:NeoCortexApi.Utility.GroupBy2`1.Slot`1.GetHashCode">
             Returns the hash code value of the present value, if any, or 0 (zero) if
             no value is present.
            
             @return hash code value of the present value or 0 if no value is present
        </member>
        <member name="M:NeoCortexApi.Utility.GroupBy2`1.Slot`1.ToString">
             Returns a non-empty string representation of this Slot suitable for
             debugging. The exact presentation format is unspecified and may vary
             between implementations and versions.
            
             @implSpec If a value is present the result must include its string
             representation in the result. Empty and present Slots must be
             unambiguously differentiable.
            
             @return the string representation of this instance
        </member>
        <member name="M:NeoCortexApi.Utility.GroupBy2`1.Slot`1.Compare(`1,`1)">
            <summary>
            Compares two slots.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="T:NeoCortexApi.Utility.IntGenerator">
            Generates a range of integers.
            
            @author 
        </member>
        <member name="F:NeoCortexApi.Utility.IntGenerator.serialVersionUID">
            serial version 
        </member>
        <member name="M:NeoCortexApi.Utility.IntGenerator.get">
            Returns the value returned by the last call to {@link #next()}
            or the initial value if no previous call to {@code #next()} was made.
            @return
        </member>
        <member name="M:NeoCortexApi.Utility.IntGenerator.size">
            Returns the configured size or distance between the initialized
            upper and lower bounds.
            @return
        </member>
        <member name="M:NeoCortexApi.Utility.IntGenerator.reset">
            Returns the state of this generator to its initial state so 
            that it can be reused.
        </member>
        <member name="M:NeoCortexApi.Utility.IntGenerator.next">
            <summary>
            Moves iterator to the next value and returns the current value.
            </summary>
            <returns></returns>
        </member>
        <member name="P:NeoCortexApi.Utility.IntGenerator.NextValue">
            <summary>
            Gets the next value witout of incremmenting iterator.
            </summary>
        </member>
        <member name="M:NeoCortexApi.Utility.IntGenerator.hasNext">
            {@inheritDoc}
        </member>
        <member name="M:NeoCortexApi.Utility.IntGenerator.of(System.Int32,System.Int32)">
            Returns a {@link Generator} which returns integers between
            the values specified (lower inclusive, upper exclusive)
            @param lower     the lower bounds or start value
            @param upper     the upper bounds (exclusive)
            @return
        </member>
        <member name="M:NeoCortexApi.Utility.MathHelpers.GetHammingDistance(System.Double[][],System.Double[][])">
            <summary>
            Calculates the hamming distance between arrays.
            </summary>
            <param name="originArray">Original array to compare from.</param>
            <param name="comparingArray">Array to compare to.</param>
            <returns>Hamming distance.</returns>
        </member>
        <member name="F:NeoCortexApi.Utility.Topology.serialVersionUID">
            keep it simple 
        </member>
        <member name="M:NeoCortexApi.Utility.Topology.#ctor(System.Int32[])">
            Constructs a new {@link AbstractFlatMatrix} object to be configured with specified
            dimensions and major ordering.
            @param shape  the dimensions of this matrix 
        </member>
        <member name="M:NeoCortexApi.Utility.Topology.GetCoordinatesFromIndex(System.Int32)">
            Translate an index into coordinates, using the given coordinate system.
            
            @param index     The index of the point. The coordinates are expressed as a single index by
                             using the dimensions as a mixed radix definition. For example, in dimensions
                             42x10, the point [1, 4] is index 1*420 + 4*10 = 460.
            @return          A array of coordinates of length len(dimensions).
        </member>
        <member name="M:NeoCortexApi.Utility.Topology.GndexFromCoordinates(System.Int32[])">
            Translate coordinates into an index, using the given coordinate system.
            
            @param coordinates       A array of coordinates of length dimensions.size().
            @param shape             The coordinate system.
            @return                  The index of the point. The coordinates are expressed as a single index by
                                     using the dimensions as a mixed radix definition. For example, in dimensions
                                     42x10, the point [1, 4] is index 1*420 + 4*10 = 460.
        </member>
        <member name="M:NeoCortexApi.Utility.Topology.GetNeighborhood(System.Int32,System.Int32)">
             Get the points in the neighborhood of a point.
            
             A point's neighborhood is the n-dimensional hypercube with sides ranging
             [center - radius, center + radius], inclusive. For example, if there are two
             dimensions and the radius is 3, the neighborhood is 6x6. Neighborhoods are
             truncated when they are near an edge.
             
             @param centerIndex       The index of the point. The coordinates are expressed as a single index by
                                      using the dimensions as a mixed radix definition. For example, in dimensions
                                      42x10, the point [1, 4] is index 1*420 + 4*10 = 460.
             @param radius            The radius of this neighborhood about the centerIndex.
             @return  The points in the neighborhood, including centerIndex.
        </member>
        <member name="M:NeoCortexApi.Utility.Topology.wrappingNeighborhood(System.Int32,System.Int32)">
            Like {@link #neighborhood(int, int)}, except that the neighborhood isn't truncated when it's
            near an edge. It wraps around to the other side.
            
            @param centerIndex       The index of the point. The coordinates are expressed as a single index by
                                     using the dimensions as a mixed radix definition. For example, in dimensions
                                     42x10, the point [1, 4] is index 1*420 + 4*10 = 460.
            @param radius            The radius of this neighborhood about the centerIndex.
            @return  The points in the neighborhood, including centerIndex.
        </member>
    </members>
</doc>
